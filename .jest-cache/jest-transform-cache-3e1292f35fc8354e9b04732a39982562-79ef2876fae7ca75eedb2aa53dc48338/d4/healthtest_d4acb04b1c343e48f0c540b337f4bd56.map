{"version":3,"sources":["C:\\kod\\cekirdek\\tests\\api\\health.test.ts"],"sourcesContent":["import { GET } from '../../app/api/health/route'\r\n\r\n// Mock NextResponse\r\njest.mock('next/server', () => ({\r\n  NextResponse: {\r\n    json: jest.fn((data, options) => ({\r\n      status: options?.status || 200,\r\n      json: async () => data,\r\n      headers: new Map(),\r\n    })),\r\n  },\r\n}))\r\n\r\ndescribe('Health API', () => {\r\n  beforeEach(() => {\r\n    // Reset fetch mock before each test\r\n    jest.clearAllMocks()\r\n  })\r\n\r\n  it('returns 200 status with health information', async () => {\r\n  // Create a minimal NextRequest-like mock\r\n    const request = new Request('http://localhost:3000/api/health')\r\n    // @ts-ignore - adapt minimal shape for NextRequest\r\n    const nextReq: any = request\r\n    const response = await GET(nextReq)\r\n    \r\n    expect(response.status).toBe(200)\r\n    \r\n    const data = await response.json()\r\n    expect(data).toHaveProperty('status')\r\n    expect(data).toHaveProperty('timestamp')\r\n    expect(data).toHaveProperty('version')\r\n    expect(data.status).toBe('healthy')\r\n  })\r\n\r\n  it('includes required health check fields', async () => {\r\n    const request = new Request('http://localhost:3000/api/health')\r\n    \r\n    const response = await GET(request)\r\n    const data = await response.json()\r\n    \r\n    expect(data).toHaveProperty('database')\r\n    expect(data).toHaveProperty('uptime')\r\n    expect(data).toHaveProperty('environment')\r\n  })\r\n\r\n  it('returns correct response format', async () => {\r\n    const request = new Request('http://localhost:3000/api/health')\r\n    \r\n    const response = await GET(request)\r\n    const data = await response.json()\r\n    \r\n    // Check all required fields\r\n    expect(data).toHaveProperty('status')\r\n    expect(data).toHaveProperty('timestamp')\r\n    expect(data).toHaveProperty('version')\r\n    expect(data).toHaveProperty('environment')\r\n    expect(data).toHaveProperty('database')\r\n    expect(data).toHaveProperty('uptime')\r\n    expect(data).toHaveProperty('memory')\r\n    \r\n    // Check data types\r\n    expect(typeof data.status).toBe('string')\r\n    expect(typeof data.timestamp).toBe('string')\r\n    expect(typeof data.version).toBe('string')\r\n    expect(typeof data.environment).toBe('string')\r\n    expect(typeof data.database).toBe('string')\r\n    expect(typeof data.uptime).toBe('number')\r\n    expect(typeof data.memory).toBe('object')\r\n  })\r\n}) "],"names":["jest","mock","NextResponse","json","fn","data","options","status","headers","Map","describe","beforeEach","clearAllMocks","it","request","Request","nextReq","response","GET","expect","toBe","toHaveProperty","timestamp","version","environment","database","uptime","memory"],"mappings":";AAEA,oBAAoB;AACpBA,KAAKC,IAAI,CAAC,eAAe,IAAO,CAAA;QAC9BC,cAAc;YACZC,MAAMH,KAAKI,EAAE,CAAC,CAACC,MAAMC,UAAa,CAAA;oBAChCC,QAAQD,SAASC,UAAU;oBAC3BJ,MAAM,UAAYE;oBAClBG,SAAS,IAAIC;gBACf,CAAA;QACF;IACF,CAAA;;;;uBAXoB;AAapBC,SAAS,cAAc;IACrBC,WAAW;QACT,oCAAoC;QACpCX,KAAKY,aAAa;IACpB;IAEAC,GAAG,8CAA8C;QACjD,yCAAyC;QACvC,MAAMC,UAAU,IAAIC,QAAQ;QAC5B,mDAAmD;QACnD,MAAMC,UAAeF;QACrB,MAAMG,WAAW,MAAMC,IAAAA,UAAG,EAACF;QAE3BG,OAAOF,SAASV,MAAM,EAAEa,IAAI,CAAC;QAE7B,MAAMf,OAAO,MAAMY,SAASd,IAAI;QAChCgB,OAAOd,MAAMgB,cAAc,CAAC;QAC5BF,OAAOd,MAAMgB,cAAc,CAAC;QAC5BF,OAAOd,MAAMgB,cAAc,CAAC;QAC5BF,OAAOd,KAAKE,MAAM,EAAEa,IAAI,CAAC;IAC3B;IAEAP,GAAG,yCAAyC;QAC1C,MAAMC,UAAU,IAAIC,QAAQ;QAE5B,MAAME,WAAW,MAAMC,IAAAA,UAAG,EAACJ;QAC3B,MAAMT,OAAO,MAAMY,SAASd,IAAI;QAEhCgB,OAAOd,MAAMgB,cAAc,CAAC;QAC5BF,OAAOd,MAAMgB,cAAc,CAAC;QAC5BF,OAAOd,MAAMgB,cAAc,CAAC;IAC9B;IAEAR,GAAG,mCAAmC;QACpC,MAAMC,UAAU,IAAIC,QAAQ;QAE5B,MAAME,WAAW,MAAMC,IAAAA,UAAG,EAACJ;QAC3B,MAAMT,OAAO,MAAMY,SAASd,IAAI;QAEhC,4BAA4B;QAC5BgB,OAAOd,MAAMgB,cAAc,CAAC;QAC5BF,OAAOd,MAAMgB,cAAc,CAAC;QAC5BF,OAAOd,MAAMgB,cAAc,CAAC;QAC5BF,OAAOd,MAAMgB,cAAc,CAAC;QAC5BF,OAAOd,MAAMgB,cAAc,CAAC;QAC5BF,OAAOd,MAAMgB,cAAc,CAAC;QAC5BF,OAAOd,MAAMgB,cAAc,CAAC;QAE5B,mBAAmB;QACnBF,OAAO,OAAOd,KAAKE,MAAM,EAAEa,IAAI,CAAC;QAChCD,OAAO,OAAOd,KAAKiB,SAAS,EAAEF,IAAI,CAAC;QACnCD,OAAO,OAAOd,KAAKkB,OAAO,EAAEH,IAAI,CAAC;QACjCD,OAAO,OAAOd,KAAKmB,WAAW,EAAEJ,IAAI,CAAC;QACrCD,OAAO,OAAOd,KAAKoB,QAAQ,EAAEL,IAAI,CAAC;QAClCD,OAAO,OAAOd,KAAKqB,MAAM,EAAEN,IAAI,CAAC;QAChCD,OAAO,OAAOd,KAAKsB,MAAM,EAAEP,IAAI,CAAC;IAClC;AACF"}