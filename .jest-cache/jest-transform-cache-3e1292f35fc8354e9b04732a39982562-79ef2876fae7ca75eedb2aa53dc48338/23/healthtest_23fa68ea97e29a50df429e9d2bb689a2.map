{"version":3,"sources":["C:\\kod\\cekirdek\\tests\\api\\health.test.ts"],"sourcesContent":["import { GET } from '../../app/api/health/route'\r\n\r\n// Mock NextResponse\r\njest.mock('next/server', () => ({\r\n  NextResponse: {\r\n    json: jest.fn((data, options) => ({\r\n      status: options?.status || 200,\r\n      json: async () => data,\r\n      headers: new Map(),\r\n    })),\r\n  },\r\n}))\r\n\r\ndescribe('Health API', () => {\r\n  beforeEach(() => {\r\n    // Reset fetch mock before each test\r\n    jest.clearAllMocks()\r\n  })\r\n\r\n  it('returns 200 status with health information', async () => {\r\n  // Create a minimal NextRequest-like mock\r\n    // Create a minimal NextRequest-like mock using NextRequest from 'next/server'\r\n    // For tests we only need a compatible shape\r\n    // @ts-ignore\r\n    const nextReq: any = { url: 'http://localhost:3000/api/health', headers: new Map(), cookies: { getAll: () => [] } };\r\n    const response = await GET(nextReq)\r\n    \r\n    expect(response.status).toBe(200)\r\n    \r\n    const data = await response.json()\r\n    expect(data).toHaveProperty('status')\r\n    expect(data).toHaveProperty('timestamp')\r\n    expect(data).toHaveProperty('version')\r\n    expect(data.status).toBe('healthy')\r\n  })\r\n\r\n  it('includes required health check fields', async () => {\r\n    const request = new Request('http://localhost:3000/api/health')\r\n    \r\n    const response = await GET(request)\r\n    const data = await response.json()\r\n    \r\n    expect(data).toHaveProperty('database')\r\n    expect(data).toHaveProperty('uptime')\r\n    expect(data).toHaveProperty('environment')\r\n  })\r\n\r\n  it('returns correct response format', async () => {\r\n    const request = new Request('http://localhost:3000/api/health')\r\n    \r\n    const response = await GET(request)\r\n    const data = await response.json()\r\n    \r\n    // Check all required fields\r\n    expect(data).toHaveProperty('status')\r\n    expect(data).toHaveProperty('timestamp')\r\n    expect(data).toHaveProperty('version')\r\n    expect(data).toHaveProperty('environment')\r\n    expect(data).toHaveProperty('database')\r\n    expect(data).toHaveProperty('uptime')\r\n    expect(data).toHaveProperty('memory')\r\n    \r\n    // Check data types\r\n    expect(typeof data.status).toBe('string')\r\n    expect(typeof data.timestamp).toBe('string')\r\n    expect(typeof data.version).toBe('string')\r\n    expect(typeof data.environment).toBe('string')\r\n    expect(typeof data.database).toBe('string')\r\n    expect(typeof data.uptime).toBe('number')\r\n    expect(typeof data.memory).toBe('object')\r\n  })\r\n}) "],"names":["jest","mock","NextResponse","json","fn","data","options","status","headers","Map","describe","beforeEach","clearAllMocks","it","nextReq","url","cookies","getAll","response","GET","expect","toBe","toHaveProperty","request","Request","timestamp","version","environment","database","uptime","memory"],"mappings":";AAEA,oBAAoB;AACpBA,KAAKC,IAAI,CAAC,eAAe,IAAO,CAAA;QAC9BC,cAAc;YACZC,MAAMH,KAAKI,EAAE,CAAC,CAACC,MAAMC,UAAa,CAAA;oBAChCC,QAAQD,SAASC,UAAU;oBAC3BJ,MAAM,UAAYE;oBAClBG,SAAS,IAAIC;gBACf,CAAA;QACF;IACF,CAAA;;;;uBAXoB;AAapBC,SAAS,cAAc;IACrBC,WAAW;QACT,oCAAoC;QACpCX,KAAKY,aAAa;IACpB;IAEAC,GAAG,8CAA8C;QACjD,yCAAyC;QACvC,8EAA8E;QAC9E,4CAA4C;QAC5C,aAAa;QACb,MAAMC,UAAe;YAAEC,KAAK;YAAoCP,SAAS,IAAIC;YAAOO,SAAS;gBAAEC,QAAQ,IAAM,EAAE;YAAC;QAAE;QAClH,MAAMC,WAAW,MAAMC,IAAAA,UAAG,EAACL;QAE3BM,OAAOF,SAASX,MAAM,EAAEc,IAAI,CAAC;QAE7B,MAAMhB,OAAO,MAAMa,SAASf,IAAI;QAChCiB,OAAOf,MAAMiB,cAAc,CAAC;QAC5BF,OAAOf,MAAMiB,cAAc,CAAC;QAC5BF,OAAOf,MAAMiB,cAAc,CAAC;QAC5BF,OAAOf,KAAKE,MAAM,EAAEc,IAAI,CAAC;IAC3B;IAEAR,GAAG,yCAAyC;QAC1C,MAAMU,UAAU,IAAIC,QAAQ;QAE5B,MAAMN,WAAW,MAAMC,IAAAA,UAAG,EAACI;QAC3B,MAAMlB,OAAO,MAAMa,SAASf,IAAI;QAEhCiB,OAAOf,MAAMiB,cAAc,CAAC;QAC5BF,OAAOf,MAAMiB,cAAc,CAAC;QAC5BF,OAAOf,MAAMiB,cAAc,CAAC;IAC9B;IAEAT,GAAG,mCAAmC;QACpC,MAAMU,UAAU,IAAIC,QAAQ;QAE5B,MAAMN,WAAW,MAAMC,IAAAA,UAAG,EAACI;QAC3B,MAAMlB,OAAO,MAAMa,SAASf,IAAI;QAEhC,4BAA4B;QAC5BiB,OAAOf,MAAMiB,cAAc,CAAC;QAC5BF,OAAOf,MAAMiB,cAAc,CAAC;QAC5BF,OAAOf,MAAMiB,cAAc,CAAC;QAC5BF,OAAOf,MAAMiB,cAAc,CAAC;QAC5BF,OAAOf,MAAMiB,cAAc,CAAC;QAC5BF,OAAOf,MAAMiB,cAAc,CAAC;QAC5BF,OAAOf,MAAMiB,cAAc,CAAC;QAE5B,mBAAmB;QACnBF,OAAO,OAAOf,KAAKE,MAAM,EAAEc,IAAI,CAAC;QAChCD,OAAO,OAAOf,KAAKoB,SAAS,EAAEJ,IAAI,CAAC;QACnCD,OAAO,OAAOf,KAAKqB,OAAO,EAAEL,IAAI,CAAC;QACjCD,OAAO,OAAOf,KAAKsB,WAAW,EAAEN,IAAI,CAAC;QACrCD,OAAO,OAAOf,KAAKuB,QAAQ,EAAEP,IAAI,CAAC;QAClCD,OAAO,OAAOf,KAAKwB,MAAM,EAAER,IAAI,CAAC;QAChCD,OAAO,OAAOf,KAAKyB,MAAM,EAAET,IAAI,CAAC;IAClC;AACF"}