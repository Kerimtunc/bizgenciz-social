90a0fb25db428bda4cb6704572a15ca1
"use strict";
// Mock NextResponse
jest.mock('next/server', ()=>({
        NextResponse: {
            json: jest.fn((data, options)=>({
                    status: options?.status || 200,
                    json: async ()=>data,
                    headers: new Map()
                }))
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _route = require("../../app/api/health/route");
const _server = require("next/server");
describe('Health API', ()=>{
    beforeEach(()=>{
        // Reset fetch mock before each test
        jest.clearAllMocks();
    });
    it('returns 200 status with health information', async ()=>{
        const request = new _server.NextRequest(new URL('http://localhost:3000/api/health'));
        const response = await (0, _route.GET)(request);
        expect(response.status).toBe(200);
        const data = await response.json();
        expect(data).toHaveProperty('status');
        expect(data).toHaveProperty('timestamp');
        expect(data).toHaveProperty('version');
        expect(data.status).toBe('healthy');
    });
    it('includes required health check fields', async ()=>{
        const request = new _server.NextRequest(new URL('http://localhost:3000/api/health'));
        const response = await (0, _route.GET)(request);
        const data = await response.json();
        expect(data).toHaveProperty('database');
        expect(data).toHaveProperty('uptime');
        expect(data).toHaveProperty('environment');
    });
    it('returns correct response format', async ()=>{
        const request = new _server.NextRequest(new URL('http://localhost:3000/api/health'));
        const response = await (0, _route.GET)(request);
        const data = await response.json();
        // Check all required fields
        expect(data).toHaveProperty('status');
        expect(data).toHaveProperty('timestamp');
        expect(data).toHaveProperty('version');
        expect(data).toHaveProperty('environment');
        expect(data).toHaveProperty('database');
        expect(data).toHaveProperty('uptime');
        expect(data).toHaveProperty('memory');
        // Check data types
        expect(typeof data.status).toBe('string');
        expect(typeof data.timestamp).toBe('string');
        expect(typeof data.version).toBe('string');
        expect(typeof data.environment).toBe('string');
        expect(typeof data.database).toBe('string');
        expect(typeof data.uptime).toBe('number');
        expect(typeof data.memory).toBe('object');
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2UvdGVzdHMvYXBpL2hlYWx0aC50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdFVCB9IGZyb20gJy4uLy4uL2FwcC9hcGkvaGVhbHRoL3JvdXRlJ1xuaW1wb3J0IHsgTmV4dFJlcXVlc3QgfSBmcm9tICduZXh0L3NlcnZlcidcblxuLy8gTW9jayBOZXh0UmVzcG9uc2Vcbmplc3QubW9jaygnbmV4dC9zZXJ2ZXInLCAoKSA9PiAoe1xuICBOZXh0UmVzcG9uc2U6IHtcbiAgICBqc29uOiBqZXN0LmZuKChkYXRhLCBvcHRpb25zKSA9PiAoe1xuICAgICAgc3RhdHVzOiBvcHRpb25zPy5zdGF0dXMgfHwgMjAwLFxuICAgICAganNvbjogYXN5bmMgKCkgPT4gZGF0YSxcbiAgICAgIGhlYWRlcnM6IG5ldyBNYXAoKSxcbiAgICB9KSksXG4gIH0sXG59KSlcblxuZGVzY3JpYmUoJ0hlYWx0aCBBUEknLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIC8vIFJlc2V0IGZldGNoIG1vY2sgYmVmb3JlIGVhY2ggdGVzdFxuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpXG4gIH0pXG5cbiAgaXQoJ3JldHVybnMgMjAwIHN0YXR1cyB3aXRoIGhlYWx0aCBpbmZvcm1hdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IE5leHRSZXF1ZXN0KG5ldyBVUkwoJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9hcGkvaGVhbHRoJykpXG4gICAgXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBHRVQocmVxdWVzdClcbiAgICBcbiAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50b0JlKDIwMClcbiAgICBcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpXG4gICAgZXhwZWN0KGRhdGEpLnRvSGF2ZVByb3BlcnR5KCdzdGF0dXMnKVxuICAgIGV4cGVjdChkYXRhKS50b0hhdmVQcm9wZXJ0eSgndGltZXN0YW1wJylcbiAgICBleHBlY3QoZGF0YSkudG9IYXZlUHJvcGVydHkoJ3ZlcnNpb24nKVxuICAgIGV4cGVjdChkYXRhLnN0YXR1cykudG9CZSgnaGVhbHRoeScpXG4gIH0pXG5cbiAgaXQoJ2luY2x1ZGVzIHJlcXVpcmVkIGhlYWx0aCBjaGVjayBmaWVsZHMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgcmVxdWVzdCA9IG5ldyBOZXh0UmVxdWVzdChuZXcgVVJMKCdodHRwOi8vbG9jYWxob3N0OjMwMDAvYXBpL2hlYWx0aCcpKVxuICAgIFxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgR0VUKHJlcXVlc3QpXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKVxuICAgIFxuICAgIGV4cGVjdChkYXRhKS50b0hhdmVQcm9wZXJ0eSgnZGF0YWJhc2UnKVxuICAgIGV4cGVjdChkYXRhKS50b0hhdmVQcm9wZXJ0eSgndXB0aW1lJylcbiAgICBleHBlY3QoZGF0YSkudG9IYXZlUHJvcGVydHkoJ2Vudmlyb25tZW50JylcbiAgfSlcblxuICBpdCgncmV0dXJucyBjb3JyZWN0IHJlc3BvbnNlIGZvcm1hdCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IE5leHRSZXF1ZXN0KG5ldyBVUkwoJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9hcGkvaGVhbHRoJykpXG4gICAgXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBHRVQocmVxdWVzdClcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpXG4gICAgXG4gICAgLy8gQ2hlY2sgYWxsIHJlcXVpcmVkIGZpZWxkc1xuICAgIGV4cGVjdChkYXRhKS50b0hhdmVQcm9wZXJ0eSgnc3RhdHVzJylcbiAgICBleHBlY3QoZGF0YSkudG9IYXZlUHJvcGVydHkoJ3RpbWVzdGFtcCcpXG4gICAgZXhwZWN0KGRhdGEpLnRvSGF2ZVByb3BlcnR5KCd2ZXJzaW9uJylcbiAgICBleHBlY3QoZGF0YSkudG9IYXZlUHJvcGVydHkoJ2Vudmlyb25tZW50JylcbiAgICBleHBlY3QoZGF0YSkudG9IYXZlUHJvcGVydHkoJ2RhdGFiYXNlJylcbiAgICBleHBlY3QoZGF0YSkudG9IYXZlUHJvcGVydHkoJ3VwdGltZScpXG4gICAgZXhwZWN0KGRhdGEpLnRvSGF2ZVByb3BlcnR5KCdtZW1vcnknKVxuICAgIFxuICAgIC8vIENoZWNrIGRhdGEgdHlwZXNcbiAgICBleHBlY3QodHlwZW9mIGRhdGEuc3RhdHVzKS50b0JlKCdzdHJpbmcnKVxuICAgIGV4cGVjdCh0eXBlb2YgZGF0YS50aW1lc3RhbXApLnRvQmUoJ3N0cmluZycpXG4gICAgZXhwZWN0KHR5cGVvZiBkYXRhLnZlcnNpb24pLnRvQmUoJ3N0cmluZycpXG4gICAgZXhwZWN0KHR5cGVvZiBkYXRhLmVudmlyb25tZW50KS50b0JlKCdzdHJpbmcnKVxuICAgIGV4cGVjdCh0eXBlb2YgZGF0YS5kYXRhYmFzZSkudG9CZSgnc3RyaW5nJylcbiAgICBleHBlY3QodHlwZW9mIGRhdGEudXB0aW1lKS50b0JlKCdudW1iZXInKVxuICAgIGV4cGVjdCh0eXBlb2YgZGF0YS5tZW1vcnkpLnRvQmUoJ29iamVjdCcpXG4gIH0pXG59KSAiXSwibmFtZXMiOlsiamVzdCIsIm1vY2siLCJOZXh0UmVzcG9uc2UiLCJqc29uIiwiZm4iLCJkYXRhIiwib3B0aW9ucyIsInN0YXR1cyIsImhlYWRlcnMiLCJNYXAiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwiaXQiLCJyZXF1ZXN0IiwiTmV4dFJlcXVlc3QiLCJVUkwiLCJyZXNwb25zZSIsIkdFVCIsImV4cGVjdCIsInRvQmUiLCJ0b0hhdmVQcm9wZXJ0eSIsInRpbWVzdGFtcCIsInZlcnNpb24iLCJlbnZpcm9ubWVudCIsImRhdGFiYXNlIiwidXB0aW1lIiwibWVtb3J5Il0sIm1hcHBpbmdzIjoiO0FBR0Esb0JBQW9CO0FBQ3BCQSxLQUFLQyxJQUFJLENBQUMsZUFBZSxJQUFPLENBQUE7UUFDOUJDLGNBQWM7WUFDWkMsTUFBTUgsS0FBS0ksRUFBRSxDQUFDLENBQUNDLE1BQU1DLFVBQWEsQ0FBQTtvQkFDaENDLFFBQVFELFNBQVNDLFVBQVU7b0JBQzNCSixNQUFNLFVBQVlFO29CQUNsQkcsU0FBUyxJQUFJQztnQkFDZixDQUFBO1FBQ0Y7SUFDRixDQUFBOzs7O3VCQVpvQjt3QkFDUTtBQWE1QkMsU0FBUyxjQUFjO0lBQ3JCQyxXQUFXO1FBQ1Qsb0NBQW9DO1FBQ3BDWCxLQUFLWSxhQUFhO0lBQ3BCO0lBRUFDLEdBQUcsOENBQThDO1FBQy9DLE1BQU1DLFVBQVUsSUFBSUMsbUJBQVcsQ0FBQyxJQUFJQyxJQUFJO1FBRXhDLE1BQU1DLFdBQVcsTUFBTUMsSUFBQUEsVUFBRyxFQUFDSjtRQUUzQkssT0FBT0YsU0FBU1YsTUFBTSxFQUFFYSxJQUFJLENBQUM7UUFFN0IsTUFBTWYsT0FBTyxNQUFNWSxTQUFTZCxJQUFJO1FBQ2hDZ0IsT0FBT2QsTUFBTWdCLGNBQWMsQ0FBQztRQUM1QkYsT0FBT2QsTUFBTWdCLGNBQWMsQ0FBQztRQUM1QkYsT0FBT2QsTUFBTWdCLGNBQWMsQ0FBQztRQUM1QkYsT0FBT2QsS0FBS0UsTUFBTSxFQUFFYSxJQUFJLENBQUM7SUFDM0I7SUFFQVAsR0FBRyx5Q0FBeUM7UUFDMUMsTUFBTUMsVUFBVSxJQUFJQyxtQkFBVyxDQUFDLElBQUlDLElBQUk7UUFFeEMsTUFBTUMsV0FBVyxNQUFNQyxJQUFBQSxVQUFHLEVBQUNKO1FBQzNCLE1BQU1ULE9BQU8sTUFBTVksU0FBU2QsSUFBSTtRQUVoQ2dCLE9BQU9kLE1BQU1nQixjQUFjLENBQUM7UUFDNUJGLE9BQU9kLE1BQU1nQixjQUFjLENBQUM7UUFDNUJGLE9BQU9kLE1BQU1nQixjQUFjLENBQUM7SUFDOUI7SUFFQVIsR0FBRyxtQ0FBbUM7UUFDcEMsTUFBTUMsVUFBVSxJQUFJQyxtQkFBVyxDQUFDLElBQUlDLElBQUk7UUFFeEMsTUFBTUMsV0FBVyxNQUFNQyxJQUFBQSxVQUFHLEVBQUNKO1FBQzNCLE1BQU1ULE9BQU8sTUFBTVksU0FBU2QsSUFBSTtRQUVoQyw0QkFBNEI7UUFDNUJnQixPQUFPZCxNQUFNZ0IsY0FBYyxDQUFDO1FBQzVCRixPQUFPZCxNQUFNZ0IsY0FBYyxDQUFDO1FBQzVCRixPQUFPZCxNQUFNZ0IsY0FBYyxDQUFDO1FBQzVCRixPQUFPZCxNQUFNZ0IsY0FBYyxDQUFDO1FBQzVCRixPQUFPZCxNQUFNZ0IsY0FBYyxDQUFDO1FBQzVCRixPQUFPZCxNQUFNZ0IsY0FBYyxDQUFDO1FBQzVCRixPQUFPZCxNQUFNZ0IsY0FBYyxDQUFDO1FBRTVCLG1CQUFtQjtRQUNuQkYsT0FBTyxPQUFPZCxLQUFLRSxNQUFNLEVBQUVhLElBQUksQ0FBQztRQUNoQ0QsT0FBTyxPQUFPZCxLQUFLaUIsU0FBUyxFQUFFRixJQUFJLENBQUM7UUFDbkNELE9BQU8sT0FBT2QsS0FBS2tCLE9BQU8sRUFBRUgsSUFBSSxDQUFDO1FBQ2pDRCxPQUFPLE9BQU9kLEtBQUttQixXQUFXLEVBQUVKLElBQUksQ0FBQztRQUNyQ0QsT0FBTyxPQUFPZCxLQUFLb0IsUUFBUSxFQUFFTCxJQUFJLENBQUM7UUFDbENELE9BQU8sT0FBT2QsS0FBS3FCLE1BQU0sRUFBRU4sSUFBSSxDQUFDO1FBQ2hDRCxPQUFPLE9BQU9kLEtBQUtzQixNQUFNLEVBQUVQLElBQUksQ0FBQztJQUNsQztBQUNGIn0=