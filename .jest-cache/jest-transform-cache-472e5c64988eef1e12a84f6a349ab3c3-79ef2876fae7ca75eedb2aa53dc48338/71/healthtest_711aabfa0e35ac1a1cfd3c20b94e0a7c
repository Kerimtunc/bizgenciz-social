012d5dee5616040a661831dfc21f2cd1
"use strict";
// Mock NextResponse
jest.mock('next/server', ()=>({
        NextResponse: {
            json: jest.fn((data, options)=>({
                    status: options?.status || 200,
                    json: async ()=>data,
                    headers: new Map()
                }))
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _route = require("../../app/api/health/route");
describe('Health API', ()=>{
    beforeEach(()=>{
        // Reset fetch mock before each test
        jest.clearAllMocks();
    });
    it('returns 200 status with health information', async ()=>{
        const response = await (0, _route.GET)();
        expect(response.status).toBe(200);
        const data = await response.json();
        expect(data).toHaveProperty('status');
        expect(data).toHaveProperty('timestamp');
        expect(data).toHaveProperty('version');
        expect(data.status).toBe('healthy');
    });
    it('includes required health check fields', async ()=>{
        const response = await (0, _route.GET)();
        const data = await response.json();
        expect(data).toHaveProperty('database');
        expect(data).toHaveProperty('uptime');
        expect(data).toHaveProperty('environment');
    });
    it('returns correct response format', async ()=>{
        const response = await (0, _route.GET)();
        const data = await response.json();
        // Check all required fields
        expect(data).toHaveProperty('status');
        expect(data).toHaveProperty('timestamp');
        expect(data).toHaveProperty('version');
        expect(data).toHaveProperty('environment');
        expect(data).toHaveProperty('database');
        expect(data).toHaveProperty('uptime');
        expect(data).toHaveProperty('memory');
        // Check data types
        expect(typeof data.status).toBe('string');
        expect(typeof data.timestamp).toBe('string');
        expect(typeof data.version).toBe('string');
        expect(typeof data.environment).toBe('string');
        expect(typeof data.database).toBe('string');
        expect(typeof data.uptime).toBe('number');
        expect(typeof data.memory).toBe('object');
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2UvdGVzdHMvYXBpL2hlYWx0aC50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdFVCB9IGZyb20gJy4uLy4uL2FwcC9hcGkvaGVhbHRoL3JvdXRlJ1xuXG4vLyBNb2NrIE5leHRSZXNwb25zZVxuamVzdC5tb2NrKCduZXh0L3NlcnZlcicsICgpID0+ICh7XG4gIE5leHRSZXNwb25zZToge1xuICAgIGpzb246IGplc3QuZm4oKGRhdGEsIG9wdGlvbnMpID0+ICh7XG4gICAgICBzdGF0dXM6IG9wdGlvbnM/LnN0YXR1cyB8fCAyMDAsXG4gICAgICBqc29uOiBhc3luYyAoKSA9PiBkYXRhLFxuICAgICAgaGVhZGVyczogbmV3IE1hcCgpLFxuICAgIH0pKSxcbiAgfSxcbn0pKVxuXG5kZXNjcmliZSgnSGVhbHRoIEFQSScsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgLy8gUmVzZXQgZmV0Y2ggbW9jayBiZWZvcmUgZWFjaCB0ZXN0XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKClcbiAgfSlcblxuICBpdCgncmV0dXJucyAyMDAgc3RhdHVzIHdpdGggaGVhbHRoIGluZm9ybWF0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgR0VUKClcbiAgICBcbiAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50b0JlKDIwMClcbiAgICBcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpXG4gICAgZXhwZWN0KGRhdGEpLnRvSGF2ZVByb3BlcnR5KCdzdGF0dXMnKVxuICAgIGV4cGVjdChkYXRhKS50b0hhdmVQcm9wZXJ0eSgndGltZXN0YW1wJylcbiAgICBleHBlY3QoZGF0YSkudG9IYXZlUHJvcGVydHkoJ3ZlcnNpb24nKVxuICAgIGV4cGVjdChkYXRhLnN0YXR1cykudG9CZSgnaGVhbHRoeScpXG4gIH0pXG5cbiAgaXQoJ2luY2x1ZGVzIHJlcXVpcmVkIGhlYWx0aCBjaGVjayBmaWVsZHMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBHRVQoKVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKClcbiAgICBcbiAgICBleHBlY3QoZGF0YSkudG9IYXZlUHJvcGVydHkoJ2RhdGFiYXNlJylcbiAgICBleHBlY3QoZGF0YSkudG9IYXZlUHJvcGVydHkoJ3VwdGltZScpXG4gICAgZXhwZWN0KGRhdGEpLnRvSGF2ZVByb3BlcnR5KCdlbnZpcm9ubWVudCcpXG4gIH0pXG5cbiAgaXQoJ3JldHVybnMgY29ycmVjdCByZXNwb25zZSBmb3JtYXQnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBHRVQoKVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKClcbiAgICBcbiAgICAvLyBDaGVjayBhbGwgcmVxdWlyZWQgZmllbGRzXG4gICAgZXhwZWN0KGRhdGEpLnRvSGF2ZVByb3BlcnR5KCdzdGF0dXMnKVxuICAgIGV4cGVjdChkYXRhKS50b0hhdmVQcm9wZXJ0eSgndGltZXN0YW1wJylcbiAgICBleHBlY3QoZGF0YSkudG9IYXZlUHJvcGVydHkoJ3ZlcnNpb24nKVxuICAgIGV4cGVjdChkYXRhKS50b0hhdmVQcm9wZXJ0eSgnZW52aXJvbm1lbnQnKVxuICAgIGV4cGVjdChkYXRhKS50b0hhdmVQcm9wZXJ0eSgnZGF0YWJhc2UnKVxuICAgIGV4cGVjdChkYXRhKS50b0hhdmVQcm9wZXJ0eSgndXB0aW1lJylcbiAgICBleHBlY3QoZGF0YSkudG9IYXZlUHJvcGVydHkoJ21lbW9yeScpXG4gICAgXG4gICAgLy8gQ2hlY2sgZGF0YSB0eXBlc1xuICAgIGV4cGVjdCh0eXBlb2YgZGF0YS5zdGF0dXMpLnRvQmUoJ3N0cmluZycpXG4gICAgZXhwZWN0KHR5cGVvZiBkYXRhLnRpbWVzdGFtcCkudG9CZSgnc3RyaW5nJylcbiAgICBleHBlY3QodHlwZW9mIGRhdGEudmVyc2lvbikudG9CZSgnc3RyaW5nJylcbiAgICBleHBlY3QodHlwZW9mIGRhdGEuZW52aXJvbm1lbnQpLnRvQmUoJ3N0cmluZycpXG4gICAgZXhwZWN0KHR5cGVvZiBkYXRhLmRhdGFiYXNlKS50b0JlKCdzdHJpbmcnKVxuICAgIGV4cGVjdCh0eXBlb2YgZGF0YS51cHRpbWUpLnRvQmUoJ251bWJlcicpXG4gICAgZXhwZWN0KHR5cGVvZiBkYXRhLm1lbW9yeSkudG9CZSgnb2JqZWN0JylcbiAgfSlcbn0pICJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsIk5leHRSZXNwb25zZSIsImpzb24iLCJmbiIsImRhdGEiLCJvcHRpb25zIiwic3RhdHVzIiwiaGVhZGVycyIsIk1hcCIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJpdCIsInJlc3BvbnNlIiwiR0VUIiwiZXhwZWN0IiwidG9CZSIsInRvSGF2ZVByb3BlcnR5IiwidGltZXN0YW1wIiwidmVyc2lvbiIsImVudmlyb25tZW50IiwiZGF0YWJhc2UiLCJ1cHRpbWUiLCJtZW1vcnkiXSwibWFwcGluZ3MiOiI7QUFFQSxvQkFBb0I7QUFDcEJBLEtBQUtDLElBQUksQ0FBQyxlQUFlLElBQU8sQ0FBQTtRQUM5QkMsY0FBYztZQUNaQyxNQUFNSCxLQUFLSSxFQUFFLENBQUMsQ0FBQ0MsTUFBTUMsVUFBYSxDQUFBO29CQUNoQ0MsUUFBUUQsU0FBU0MsVUFBVTtvQkFDM0JKLE1BQU0sVUFBWUU7b0JBQ2xCRyxTQUFTLElBQUlDO2dCQUNmLENBQUE7UUFDRjtJQUNGLENBQUE7Ozs7dUJBWG9CO0FBYXBCQyxTQUFTLGNBQWM7SUFDckJDLFdBQVc7UUFDVCxvQ0FBb0M7UUFDcENYLEtBQUtZLGFBQWE7SUFDcEI7SUFFQUMsR0FBRyw4Q0FBOEM7UUFDL0MsTUFBTUMsV0FBVyxNQUFNQyxJQUFBQSxVQUFHO1FBRTFCQyxPQUFPRixTQUFTUCxNQUFNLEVBQUVVLElBQUksQ0FBQztRQUU3QixNQUFNWixPQUFPLE1BQU1TLFNBQVNYLElBQUk7UUFDaENhLE9BQU9YLE1BQU1hLGNBQWMsQ0FBQztRQUM1QkYsT0FBT1gsTUFBTWEsY0FBYyxDQUFDO1FBQzVCRixPQUFPWCxNQUFNYSxjQUFjLENBQUM7UUFDNUJGLE9BQU9YLEtBQUtFLE1BQU0sRUFBRVUsSUFBSSxDQUFDO0lBQzNCO0lBRUFKLEdBQUcseUNBQXlDO1FBQzFDLE1BQU1DLFdBQVcsTUFBTUMsSUFBQUEsVUFBRztRQUMxQixNQUFNVixPQUFPLE1BQU1TLFNBQVNYLElBQUk7UUFFaENhLE9BQU9YLE1BQU1hLGNBQWMsQ0FBQztRQUM1QkYsT0FBT1gsTUFBTWEsY0FBYyxDQUFDO1FBQzVCRixPQUFPWCxNQUFNYSxjQUFjLENBQUM7SUFDOUI7SUFFQUwsR0FBRyxtQ0FBbUM7UUFDcEMsTUFBTUMsV0FBVyxNQUFNQyxJQUFBQSxVQUFHO1FBQzFCLE1BQU1WLE9BQU8sTUFBTVMsU0FBU1gsSUFBSTtRQUVoQyw0QkFBNEI7UUFDNUJhLE9BQU9YLE1BQU1hLGNBQWMsQ0FBQztRQUM1QkYsT0FBT1gsTUFBTWEsY0FBYyxDQUFDO1FBQzVCRixPQUFPWCxNQUFNYSxjQUFjLENBQUM7UUFDNUJGLE9BQU9YLE1BQU1hLGNBQWMsQ0FBQztRQUM1QkYsT0FBT1gsTUFBTWEsY0FBYyxDQUFDO1FBQzVCRixPQUFPWCxNQUFNYSxjQUFjLENBQUM7UUFDNUJGLE9BQU9YLE1BQU1hLGNBQWMsQ0FBQztRQUU1QixtQkFBbUI7UUFDbkJGLE9BQU8sT0FBT1gsS0FBS0UsTUFBTSxFQUFFVSxJQUFJLENBQUM7UUFDaENELE9BQU8sT0FBT1gsS0FBS2MsU0FBUyxFQUFFRixJQUFJLENBQUM7UUFDbkNELE9BQU8sT0FBT1gsS0FBS2UsT0FBTyxFQUFFSCxJQUFJLENBQUM7UUFDakNELE9BQU8sT0FBT1gsS0FBS2dCLFdBQVcsRUFBRUosSUFBSSxDQUFDO1FBQ3JDRCxPQUFPLE9BQU9YLEtBQUtpQixRQUFRLEVBQUVMLElBQUksQ0FBQztRQUNsQ0QsT0FBTyxPQUFPWCxLQUFLa0IsTUFBTSxFQUFFTixJQUFJLENBQUM7UUFDaENELE9BQU8sT0FBT1gsS0FBS21CLE1BQU0sRUFBRVAsSUFBSSxDQUFDO0lBQ2xDO0FBQ0YifQ==