a36525e3aec435ac69c78c78cb041d48
"use strict";
// Mock Next.js router
jest.mock('next/router', ()=>({
        useRouter () {
            return {
                route: '/',
                pathname: '/',
                query: {},
                asPath: '/',
                push: jest.fn(),
                pop: jest.fn(),
                reload: jest.fn(),
                back: jest.fn(),
                prefetch: jest.fn().mockResolvedValue(undefined),
                beforePopState: jest.fn(),
                events: {
                    on: jest.fn(),
                    off: jest.fn(),
                    emit: jest.fn()
                },
                isFallback: false
            };
        }
    }));
// Mock Next.js navigation
jest.mock('next/navigation', ()=>({
        useRouter () {
            return {
                push: jest.fn(),
                replace: jest.fn(),
                prefetch: jest.fn(),
                back: jest.fn(),
                forward: jest.fn(),
                refresh: jest.fn()
            };
        },
        useSearchParams () {
            return new URLSearchParams();
        },
        usePathname () {
            return '/';
        }
    }));
// Mock tRPC
jest.mock('@/lib/trpc', ()=>({
        api: {
            useQuery: jest.fn(),
            useMutation: jest.fn()
        }
    }));
// Mock Prisma with comprehensive methods
jest.mock('@prisma/client', ()=>({
        PrismaClient: jest.fn().mockImplementation(()=>({
                $connect: jest.fn(),
                $disconnect: jest.fn(),
                $queryRaw: jest.fn().mockResolvedValue([
                    {
                        result: 'ok'
                    }
                ]),
                $executeRaw: jest.fn().mockResolvedValue(1),
                $transaction: jest.fn().mockImplementation((callback)=>callback()),
                user: {
                    findMany: jest.fn().mockResolvedValue([]),
                    findUnique: jest.fn().mockResolvedValue(null),
                    create: jest.fn().mockResolvedValue({}),
                    update: jest.fn().mockResolvedValue({}),
                    delete: jest.fn().mockResolvedValue({})
                },
                menu: {
                    findMany: jest.fn().mockResolvedValue([]),
                    findUnique: jest.fn().mockResolvedValue(null),
                    create: jest.fn().mockResolvedValue({}),
                    update: jest.fn().mockResolvedValue({}),
                    delete: jest.fn().mockResolvedValue({})
                },
                category: {
                    findMany: jest.fn().mockResolvedValue([]),
                    findUnique: jest.fn().mockResolvedValue(null),
                    create: jest.fn().mockResolvedValue({}),
                    update: jest.fn().mockResolvedValue({}),
                    delete: jest.fn().mockResolvedValue({})
                },
                item: {
                    findMany: jest.fn().mockResolvedValue([]),
                    findUnique: jest.fn().mockResolvedValue(null),
                    create: jest.fn().mockResolvedValue({}),
                    update: jest.fn().mockResolvedValue({}),
                    delete: jest.fn().mockResolvedValue({})
                }
            }))
    }));
// Mock Supabase
jest.mock('@supabase/supabase-js', ()=>({
        createClient: jest.fn(()=>({
                auth: {
                    signIn: jest.fn(),
                    signOut: jest.fn(),
                    getUser: jest.fn()
                },
                from: jest.fn(()=>({
                        select: jest.fn().mockReturnThis(),
                        insert: jest.fn().mockReturnThis(),
                        update: jest.fn().mockReturnThis(),
                        delete: jest.fn().mockReturnThis(),
                        eq: jest.fn().mockReturnThis(),
                        single: jest.fn(),
                        then: jest.fn()
                    }))
            }))
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
require("@testing-library/jest-dom");
// Mock fetch API for tests
global.fetch = jest.fn();
// Mock Request and Response for API tests
global.Request = class Request {
    constructor(url, options = {}){
        this.url = url;
        this.method = options.method || 'GET';
        this.headers = new Map(Object.entries(options.headers || {}));
        this.body = options.body;
    }
};
global.Response = class Response {
    constructor(body, options = {}){
        this.body = body;
        this.status = options.status || 200;
        this.statusText = options.statusText || 'OK';
        this.headers = new Map(Object.entries(options.headers || {}));
    }
    async json() {
        return typeof this.body === 'string' ? JSON.parse(this.body) : this.body;
    }
    async text() {
        return typeof this.body === 'string' ? this.body : JSON.stringify(this.body);
    }
};

//# sourceMappingURL=data:application/json;base64,