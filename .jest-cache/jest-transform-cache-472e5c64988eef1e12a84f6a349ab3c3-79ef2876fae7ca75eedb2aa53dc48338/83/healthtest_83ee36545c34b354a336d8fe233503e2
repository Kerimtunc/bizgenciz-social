2e912056832679bee7329a060c538da8
"use strict";
// Mock NextResponse
jest.mock('next/server', ()=>({
        NextResponse: {
            json: jest.fn((data, options)=>({
                    status: options?.status || 200,
                    json: async ()=>data,
                    headers: new Map()
                }))
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _route = require("../../app/api/health/route");
describe('Health API', ()=>{
    beforeEach(()=>{
        // Reset fetch mock before each test
        jest.clearAllMocks();
    });
    it('returns 200 status with health information', async ()=>{
        const request = new Request('http://localhost:3000/api/health');
        const response = await (0, _route.GET)(request);
        expect(response.status).toBe(200);
        const data = await response.json();
        expect(data).toHaveProperty('status');
        expect(data).toHaveProperty('timestamp');
        expect(data).toHaveProperty('version');
        expect(data.status).toBe('healthy');
    });
    it('includes required health check fields', async ()=>{
        const request = new Request('http://localhost:3000/api/health');
        const response = await (0, _route.GET)(request);
        const data = await response.json();
        expect(data).toHaveProperty('database');
        expect(data).toHaveProperty('uptime');
        expect(data).toHaveProperty('environment');
    });
    it('returns correct response format', async ()=>{
        const request = new Request('http://localhost:3000/api/health');
        const response = await (0, _route.GET)(request);
        const data = await response.json();
        // Check all required fields
        expect(data).toHaveProperty('status');
        expect(data).toHaveProperty('timestamp');
        expect(data).toHaveProperty('version');
        expect(data).toHaveProperty('environment');
        expect(data).toHaveProperty('database');
        expect(data).toHaveProperty('uptime');
        expect(data).toHaveProperty('memory');
        // Check data types
        expect(typeof data.status).toBe('string');
        expect(typeof data.timestamp).toBe('string');
        expect(typeof data.version).toBe('string');
        expect(typeof data.environment).toBe('string');
        expect(typeof data.database).toBe('string');
        expect(typeof data.uptime).toBe('number');
        expect(typeof data.memory).toBe('object');
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2UvdGVzdHMvYXBpL2hlYWx0aC50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdFVCB9IGZyb20gJy4uLy4uL2FwcC9hcGkvaGVhbHRoL3JvdXRlJ1xuXG4vLyBNb2NrIE5leHRSZXNwb25zZVxuamVzdC5tb2NrKCduZXh0L3NlcnZlcicsICgpID0+ICh7XG4gIE5leHRSZXNwb25zZToge1xuICAgIGpzb246IGplc3QuZm4oKGRhdGEsIG9wdGlvbnMpID0+ICh7XG4gICAgICBzdGF0dXM6IG9wdGlvbnM/LnN0YXR1cyB8fCAyMDAsXG4gICAgICBqc29uOiBhc3luYyAoKSA9PiBkYXRhLFxuICAgICAgaGVhZGVyczogbmV3IE1hcCgpLFxuICAgIH0pKSxcbiAgfSxcbn0pKVxuXG5kZXNjcmliZSgnSGVhbHRoIEFQSScsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgLy8gUmVzZXQgZmV0Y2ggbW9jayBiZWZvcmUgZWFjaCB0ZXN0XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKClcbiAgfSlcblxuICBpdCgncmV0dXJucyAyMDAgc3RhdHVzIHdpdGggaGVhbHRoIGluZm9ybWF0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgUmVxdWVzdCgnaHR0cDovL2xvY2FsaG9zdDozMDAwL2FwaS9oZWFsdGgnKVxuICAgIFxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgR0VUKHJlcXVlc3QpXG4gICAgXG4gICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1cykudG9CZSgyMDApXG4gICAgXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKVxuICAgIGV4cGVjdChkYXRhKS50b0hhdmVQcm9wZXJ0eSgnc3RhdHVzJylcbiAgICBleHBlY3QoZGF0YSkudG9IYXZlUHJvcGVydHkoJ3RpbWVzdGFtcCcpXG4gICAgZXhwZWN0KGRhdGEpLnRvSGF2ZVByb3BlcnR5KCd2ZXJzaW9uJylcbiAgICBleHBlY3QoZGF0YS5zdGF0dXMpLnRvQmUoJ2hlYWx0aHknKVxuICB9KVxuXG4gIGl0KCdpbmNsdWRlcyByZXF1aXJlZCBoZWFsdGggY2hlY2sgZmllbGRzJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgUmVxdWVzdCgnaHR0cDovL2xvY2FsaG9zdDozMDAwL2FwaS9oZWFsdGgnKVxuICAgIFxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgR0VUKHJlcXVlc3QpXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKVxuICAgIFxuICAgIGV4cGVjdChkYXRhKS50b0hhdmVQcm9wZXJ0eSgnZGF0YWJhc2UnKVxuICAgIGV4cGVjdChkYXRhKS50b0hhdmVQcm9wZXJ0eSgndXB0aW1lJylcbiAgICBleHBlY3QoZGF0YSkudG9IYXZlUHJvcGVydHkoJ2Vudmlyb25tZW50JylcbiAgfSlcblxuICBpdCgncmV0dXJucyBjb3JyZWN0IHJlc3BvbnNlIGZvcm1hdCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IFJlcXVlc3QoJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9hcGkvaGVhbHRoJylcbiAgICBcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IEdFVChyZXF1ZXN0KVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKClcbiAgICBcbiAgICAvLyBDaGVjayBhbGwgcmVxdWlyZWQgZmllbGRzXG4gICAgZXhwZWN0KGRhdGEpLnRvSGF2ZVByb3BlcnR5KCdzdGF0dXMnKVxuICAgIGV4cGVjdChkYXRhKS50b0hhdmVQcm9wZXJ0eSgndGltZXN0YW1wJylcbiAgICBleHBlY3QoZGF0YSkudG9IYXZlUHJvcGVydHkoJ3ZlcnNpb24nKVxuICAgIGV4cGVjdChkYXRhKS50b0hhdmVQcm9wZXJ0eSgnZW52aXJvbm1lbnQnKVxuICAgIGV4cGVjdChkYXRhKS50b0hhdmVQcm9wZXJ0eSgnZGF0YWJhc2UnKVxuICAgIGV4cGVjdChkYXRhKS50b0hhdmVQcm9wZXJ0eSgndXB0aW1lJylcbiAgICBleHBlY3QoZGF0YSkudG9IYXZlUHJvcGVydHkoJ21lbW9yeScpXG4gICAgXG4gICAgLy8gQ2hlY2sgZGF0YSB0eXBlc1xuICAgIGV4cGVjdCh0eXBlb2YgZGF0YS5zdGF0dXMpLnRvQmUoJ3N0cmluZycpXG4gICAgZXhwZWN0KHR5cGVvZiBkYXRhLnRpbWVzdGFtcCkudG9CZSgnc3RyaW5nJylcbiAgICBleHBlY3QodHlwZW9mIGRhdGEudmVyc2lvbikudG9CZSgnc3RyaW5nJylcbiAgICBleHBlY3QodHlwZW9mIGRhdGEuZW52aXJvbm1lbnQpLnRvQmUoJ3N0cmluZycpXG4gICAgZXhwZWN0KHR5cGVvZiBkYXRhLmRhdGFiYXNlKS50b0JlKCdzdHJpbmcnKVxuICAgIGV4cGVjdCh0eXBlb2YgZGF0YS51cHRpbWUpLnRvQmUoJ251bWJlcicpXG4gICAgZXhwZWN0KHR5cGVvZiBkYXRhLm1lbW9yeSkudG9CZSgnb2JqZWN0JylcbiAgfSlcbn0pICJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsIk5leHRSZXNwb25zZSIsImpzb24iLCJmbiIsImRhdGEiLCJvcHRpb25zIiwic3RhdHVzIiwiaGVhZGVycyIsIk1hcCIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJpdCIsInJlcXVlc3QiLCJSZXF1ZXN0IiwicmVzcG9uc2UiLCJHRVQiLCJleHBlY3QiLCJ0b0JlIiwidG9IYXZlUHJvcGVydHkiLCJ0aW1lc3RhbXAiLCJ2ZXJzaW9uIiwiZW52aXJvbm1lbnQiLCJkYXRhYmFzZSIsInVwdGltZSIsIm1lbW9yeSJdLCJtYXBwaW5ncyI6IjtBQUVBLG9CQUFvQjtBQUNwQkEsS0FBS0MsSUFBSSxDQUFDLGVBQWUsSUFBTyxDQUFBO1FBQzlCQyxjQUFjO1lBQ1pDLE1BQU1ILEtBQUtJLEVBQUUsQ0FBQyxDQUFDQyxNQUFNQyxVQUFhLENBQUE7b0JBQ2hDQyxRQUFRRCxTQUFTQyxVQUFVO29CQUMzQkosTUFBTSxVQUFZRTtvQkFDbEJHLFNBQVMsSUFBSUM7Z0JBQ2YsQ0FBQTtRQUNGO0lBQ0YsQ0FBQTs7Ozt1QkFYb0I7QUFhcEJDLFNBQVMsY0FBYztJQUNyQkMsV0FBVztRQUNULG9DQUFvQztRQUNwQ1gsS0FBS1ksYUFBYTtJQUNwQjtJQUVBQyxHQUFHLDhDQUE4QztRQUMvQyxNQUFNQyxVQUFVLElBQUlDLFFBQVE7UUFFNUIsTUFBTUMsV0FBVyxNQUFNQyxJQUFBQSxVQUFHLEVBQUNIO1FBRTNCSSxPQUFPRixTQUFTVCxNQUFNLEVBQUVZLElBQUksQ0FBQztRQUU3QixNQUFNZCxPQUFPLE1BQU1XLFNBQVNiLElBQUk7UUFDaENlLE9BQU9iLE1BQU1lLGNBQWMsQ0FBQztRQUM1QkYsT0FBT2IsTUFBTWUsY0FBYyxDQUFDO1FBQzVCRixPQUFPYixNQUFNZSxjQUFjLENBQUM7UUFDNUJGLE9BQU9iLEtBQUtFLE1BQU0sRUFBRVksSUFBSSxDQUFDO0lBQzNCO0lBRUFOLEdBQUcseUNBQXlDO1FBQzFDLE1BQU1DLFVBQVUsSUFBSUMsUUFBUTtRQUU1QixNQUFNQyxXQUFXLE1BQU1DLElBQUFBLFVBQUcsRUFBQ0g7UUFDM0IsTUFBTVQsT0FBTyxNQUFNVyxTQUFTYixJQUFJO1FBRWhDZSxPQUFPYixNQUFNZSxjQUFjLENBQUM7UUFDNUJGLE9BQU9iLE1BQU1lLGNBQWMsQ0FBQztRQUM1QkYsT0FBT2IsTUFBTWUsY0FBYyxDQUFDO0lBQzlCO0lBRUFQLEdBQUcsbUNBQW1DO1FBQ3BDLE1BQU1DLFVBQVUsSUFBSUMsUUFBUTtRQUU1QixNQUFNQyxXQUFXLE1BQU1DLElBQUFBLFVBQUcsRUFBQ0g7UUFDM0IsTUFBTVQsT0FBTyxNQUFNVyxTQUFTYixJQUFJO1FBRWhDLDRCQUE0QjtRQUM1QmUsT0FBT2IsTUFBTWUsY0FBYyxDQUFDO1FBQzVCRixPQUFPYixNQUFNZSxjQUFjLENBQUM7UUFDNUJGLE9BQU9iLE1BQU1lLGNBQWMsQ0FBQztRQUM1QkYsT0FBT2IsTUFBTWUsY0FBYyxDQUFDO1FBQzVCRixPQUFPYixNQUFNZSxjQUFjLENBQUM7UUFDNUJGLE9BQU9iLE1BQU1lLGNBQWMsQ0FBQztRQUM1QkYsT0FBT2IsTUFBTWUsY0FBYyxDQUFDO1FBRTVCLG1CQUFtQjtRQUNuQkYsT0FBTyxPQUFPYixLQUFLRSxNQUFNLEVBQUVZLElBQUksQ0FBQztRQUNoQ0QsT0FBTyxPQUFPYixLQUFLZ0IsU0FBUyxFQUFFRixJQUFJLENBQUM7UUFDbkNELE9BQU8sT0FBT2IsS0FBS2lCLE9BQU8sRUFBRUgsSUFBSSxDQUFDO1FBQ2pDRCxPQUFPLE9BQU9iLEtBQUtrQixXQUFXLEVBQUVKLElBQUksQ0FBQztRQUNyQ0QsT0FBTyxPQUFPYixLQUFLbUIsUUFBUSxFQUFFTCxJQUFJLENBQUM7UUFDbENELE9BQU8sT0FBT2IsS0FBS29CLE1BQU0sRUFBRU4sSUFBSSxDQUFDO1FBQ2hDRCxPQUFPLE9BQU9iLEtBQUtxQixNQUFNLEVBQUVQLElBQUksQ0FBQztJQUNsQztBQUNGIn0=