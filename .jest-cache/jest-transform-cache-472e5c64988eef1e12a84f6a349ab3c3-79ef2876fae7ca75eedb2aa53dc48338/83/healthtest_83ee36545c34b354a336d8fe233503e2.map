{"version":3,"sources":["/workspace/tests/api/health.test.ts"],"sourcesContent":["import { GET } from '../../app/api/health/route'\n\n// Mock NextResponse\njest.mock('next/server', () => ({\n  NextResponse: {\n    json: jest.fn((data, options) => ({\n      status: options?.status || 200,\n      json: async () => data,\n      headers: new Map(),\n    })),\n  },\n}))\n\ndescribe('Health API', () => {\n  beforeEach(() => {\n    // Reset fetch mock before each test\n    jest.clearAllMocks()\n  })\n\n  it('returns 200 status with health information', async () => {\n    const request = new Request('http://localhost:3000/api/health')\n    \n    const response = await GET(request)\n    \n    expect(response.status).toBe(200)\n    \n    const data = await response.json()\n    expect(data).toHaveProperty('status')\n    expect(data).toHaveProperty('timestamp')\n    expect(data).toHaveProperty('version')\n    expect(data.status).toBe('healthy')\n  })\n\n  it('includes required health check fields', async () => {\n    const request = new Request('http://localhost:3000/api/health')\n    \n    const response = await GET(request)\n    const data = await response.json()\n    \n    expect(data).toHaveProperty('database')\n    expect(data).toHaveProperty('uptime')\n    expect(data).toHaveProperty('environment')\n  })\n\n  it('returns correct response format', async () => {\n    const request = new Request('http://localhost:3000/api/health')\n    \n    const response = await GET(request)\n    const data = await response.json()\n    \n    // Check all required fields\n    expect(data).toHaveProperty('status')\n    expect(data).toHaveProperty('timestamp')\n    expect(data).toHaveProperty('version')\n    expect(data).toHaveProperty('environment')\n    expect(data).toHaveProperty('database')\n    expect(data).toHaveProperty('uptime')\n    expect(data).toHaveProperty('memory')\n    \n    // Check data types\n    expect(typeof data.status).toBe('string')\n    expect(typeof data.timestamp).toBe('string')\n    expect(typeof data.version).toBe('string')\n    expect(typeof data.environment).toBe('string')\n    expect(typeof data.database).toBe('string')\n    expect(typeof data.uptime).toBe('number')\n    expect(typeof data.memory).toBe('object')\n  })\n}) "],"names":["jest","mock","NextResponse","json","fn","data","options","status","headers","Map","describe","beforeEach","clearAllMocks","it","request","Request","response","GET","expect","toBe","toHaveProperty","timestamp","version","environment","database","uptime","memory"],"mappings":";AAEA,oBAAoB;AACpBA,KAAKC,IAAI,CAAC,eAAe,IAAO,CAAA;QAC9BC,cAAc;YACZC,MAAMH,KAAKI,EAAE,CAAC,CAACC,MAAMC,UAAa,CAAA;oBAChCC,QAAQD,SAASC,UAAU;oBAC3BJ,MAAM,UAAYE;oBAClBG,SAAS,IAAIC;gBACf,CAAA;QACF;IACF,CAAA;;;;uBAXoB;AAapBC,SAAS,cAAc;IACrBC,WAAW;QACT,oCAAoC;QACpCX,KAAKY,aAAa;IACpB;IAEAC,GAAG,8CAA8C;QAC/C,MAAMC,UAAU,IAAIC,QAAQ;QAE5B,MAAMC,WAAW,MAAMC,IAAAA,UAAG,EAACH;QAE3BI,OAAOF,SAAST,MAAM,EAAEY,IAAI,CAAC;QAE7B,MAAMd,OAAO,MAAMW,SAASb,IAAI;QAChCe,OAAOb,MAAMe,cAAc,CAAC;QAC5BF,OAAOb,MAAMe,cAAc,CAAC;QAC5BF,OAAOb,MAAMe,cAAc,CAAC;QAC5BF,OAAOb,KAAKE,MAAM,EAAEY,IAAI,CAAC;IAC3B;IAEAN,GAAG,yCAAyC;QAC1C,MAAMC,UAAU,IAAIC,QAAQ;QAE5B,MAAMC,WAAW,MAAMC,IAAAA,UAAG,EAACH;QAC3B,MAAMT,OAAO,MAAMW,SAASb,IAAI;QAEhCe,OAAOb,MAAMe,cAAc,CAAC;QAC5BF,OAAOb,MAAMe,cAAc,CAAC;QAC5BF,OAAOb,MAAMe,cAAc,CAAC;IAC9B;IAEAP,GAAG,mCAAmC;QACpC,MAAMC,UAAU,IAAIC,QAAQ;QAE5B,MAAMC,WAAW,MAAMC,IAAAA,UAAG,EAACH;QAC3B,MAAMT,OAAO,MAAMW,SAASb,IAAI;QAEhC,4BAA4B;QAC5Be,OAAOb,MAAMe,cAAc,CAAC;QAC5BF,OAAOb,MAAMe,cAAc,CAAC;QAC5BF,OAAOb,MAAMe,cAAc,CAAC;QAC5BF,OAAOb,MAAMe,cAAc,CAAC;QAC5BF,OAAOb,MAAMe,cAAc,CAAC;QAC5BF,OAAOb,MAAMe,cAAc,CAAC;QAC5BF,OAAOb,MAAMe,cAAc,CAAC;QAE5B,mBAAmB;QACnBF,OAAO,OAAOb,KAAKE,MAAM,EAAEY,IAAI,CAAC;QAChCD,OAAO,OAAOb,KAAKgB,SAAS,EAAEF,IAAI,CAAC;QACnCD,OAAO,OAAOb,KAAKiB,OAAO,EAAEH,IAAI,CAAC;QACjCD,OAAO,OAAOb,KAAKkB,WAAW,EAAEJ,IAAI,CAAC;QACrCD,OAAO,OAAOb,KAAKmB,QAAQ,EAAEL,IAAI,CAAC;QAClCD,OAAO,OAAOb,KAAKoB,MAAM,EAAEN,IAAI,CAAC;QAChCD,OAAO,OAAOb,KAAKqB,MAAM,EAAEP,IAAI,CAAC;IAClC;AACF"}