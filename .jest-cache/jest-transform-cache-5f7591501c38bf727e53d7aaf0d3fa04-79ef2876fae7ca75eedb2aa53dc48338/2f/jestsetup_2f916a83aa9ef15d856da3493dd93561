3b275ceacf2587888d0d3c9487c64a6e
"use strict";
// Mock Next.js router
jest.mock('next/router', ()=>({
        useRouter () {
            return {
                route: '/',
                pathname: '/',
                query: {},
                asPath: '/',
                push: jest.fn(),
                pop: jest.fn(),
                reload: jest.fn(),
                back: jest.fn(),
                prefetch: jest.fn().mockResolvedValue(undefined),
                beforePopState: jest.fn(),
                events: {
                    on: jest.fn(),
                    off: jest.fn(),
                    emit: jest.fn()
                },
                isFallback: false
            };
        }
    }));
// Mock Next.js navigation
jest.mock('next/navigation', ()=>({
        useRouter () {
            return {
                push: jest.fn(),
                replace: jest.fn(),
                prefetch: jest.fn(),
                back: jest.fn(),
                forward: jest.fn(),
                refresh: jest.fn()
            };
        },
        useSearchParams () {
            return new URLSearchParams();
        },
        usePathname () {
            return '/';
        }
    }));
// Mock tRPC
jest.mock('@/lib/trpc', ()=>({
        api: {
            useQuery: jest.fn(),
            useMutation: jest.fn()
        }
    }));
// Mock Prisma
jest.mock('@prisma/client', ()=>({
        PrismaClient: jest.fn().mockImplementation(()=>({
                $connect: jest.fn(),
                $disconnect: jest.fn()
            }))
    }));
// Mock Supabase
jest.mock('@supabase/supabase-js', ()=>({
        createClient: jest.fn(()=>({
                auth: {
                    signIn: jest.fn(),
                    signOut: jest.fn(),
                    getUser: jest.fn()
                },
                from: jest.fn(()=>({
                        select: jest.fn().mockReturnThis(),
                        insert: jest.fn().mockReturnThis(),
                        update: jest.fn().mockReturnThis(),
                        delete: jest.fn().mockReturnThis(),
                        eq: jest.fn().mockReturnThis(),
                        single: jest.fn(),
                        then: jest.fn()
                    }))
            }))
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
require("@testing-library/jest-dom");
// Mock fetch API for tests
global.fetch = jest.fn();
// Mock Request and Response for API tests
global.Request = class Request {
    constructor(url, options = {}){
        this.url = url;
        this.method = options.method || 'GET';
        this.headers = new Map(Object.entries(options.headers || {}));
        this.body = options.body;
    }
};
global.Response = class Response {
    constructor(body, options = {}){
        this.body = body;
        this.status = options.status || 200;
        this.statusText = options.statusText || 'OK';
        this.headers = new Map(Object.entries(options.headers || {}));
    }
    async json() {
        return typeof this.body === 'string' ? JSON.parse(this.body) : this.body;
    }
    async text() {
        return typeof this.body === 'string' ? this.body : JSON.stringify(this.body);
    }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxrb2RcXHllbWVremVuXFxqZXN0LnNldHVwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbSdcclxuXHJcbi8vIE1vY2sgZmV0Y2ggQVBJIGZvciB0ZXN0c1xyXG5nbG9iYWwuZmV0Y2ggPSBqZXN0LmZuKClcclxuXHJcbi8vIE1vY2sgUmVxdWVzdCBhbmQgUmVzcG9uc2UgZm9yIEFQSSB0ZXN0c1xyXG5nbG9iYWwuUmVxdWVzdCA9IGNsYXNzIFJlcXVlc3Qge1xyXG4gIGNvbnN0cnVjdG9yKHVybCwgb3B0aW9ucyA9IHt9KSB7XHJcbiAgICB0aGlzLnVybCA9IHVybFxyXG4gICAgdGhpcy5tZXRob2QgPSBvcHRpb25zLm1ldGhvZCB8fCAnR0VUJ1xyXG4gICAgdGhpcy5oZWFkZXJzID0gbmV3IE1hcChPYmplY3QuZW50cmllcyhvcHRpb25zLmhlYWRlcnMgfHwge30pKVxyXG4gICAgdGhpcy5ib2R5ID0gb3B0aW9ucy5ib2R5XHJcbiAgfVxyXG59XHJcblxyXG5nbG9iYWwuUmVzcG9uc2UgPSBjbGFzcyBSZXNwb25zZSB7XHJcbiAgY29uc3RydWN0b3IoYm9keSwgb3B0aW9ucyA9IHt9KSB7XHJcbiAgICB0aGlzLmJvZHkgPSBib2R5XHJcbiAgICB0aGlzLnN0YXR1cyA9IG9wdGlvbnMuc3RhdHVzIHx8IDIwMFxyXG4gICAgdGhpcy5zdGF0dXNUZXh0ID0gb3B0aW9ucy5zdGF0dXNUZXh0IHx8ICdPSydcclxuICAgIHRoaXMuaGVhZGVycyA9IG5ldyBNYXAoT2JqZWN0LmVudHJpZXMob3B0aW9ucy5oZWFkZXJzIHx8IHt9KSlcclxuICB9XHJcblxyXG4gIGFzeW5jIGpzb24oKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHRoaXMuYm9keSA9PT0gJ3N0cmluZycgPyBKU09OLnBhcnNlKHRoaXMuYm9keSkgOiB0aGlzLmJvZHlcclxuICB9XHJcblxyXG4gIGFzeW5jIHRleHQoKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHRoaXMuYm9keSA9PT0gJ3N0cmluZycgPyB0aGlzLmJvZHkgOiBKU09OLnN0cmluZ2lmeSh0aGlzLmJvZHkpXHJcbiAgfVxyXG59XHJcblxyXG4vLyBNb2NrIE5leHQuanMgcm91dGVyXHJcbmplc3QubW9jaygnbmV4dC9yb3V0ZXInLCAoKSA9PiAoe1xyXG4gIHVzZVJvdXRlcigpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHJvdXRlOiAnLycsXHJcbiAgICAgIHBhdGhuYW1lOiAnLycsXHJcbiAgICAgIHF1ZXJ5OiB7fSxcclxuICAgICAgYXNQYXRoOiAnLycsXHJcbiAgICAgIHB1c2g6IGplc3QuZm4oKSxcclxuICAgICAgcG9wOiBqZXN0LmZuKCksXHJcbiAgICAgIHJlbG9hZDogamVzdC5mbigpLFxyXG4gICAgICBiYWNrOiBqZXN0LmZuKCksXHJcbiAgICAgIHByZWZldGNoOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKSxcclxuICAgICAgYmVmb3JlUG9wU3RhdGU6IGplc3QuZm4oKSxcclxuICAgICAgZXZlbnRzOiB7XHJcbiAgICAgICAgb246IGplc3QuZm4oKSxcclxuICAgICAgICBvZmY6IGplc3QuZm4oKSxcclxuICAgICAgICBlbWl0OiBqZXN0LmZuKCksXHJcbiAgICAgIH0sXHJcbiAgICAgIGlzRmFsbGJhY2s6IGZhbHNlLFxyXG4gICAgfVxyXG4gIH0sXHJcbn0pKVxyXG5cclxuLy8gTW9jayBOZXh0LmpzIG5hdmlnYXRpb25cclxuamVzdC5tb2NrKCduZXh0L25hdmlnYXRpb24nLCAoKSA9PiAoe1xyXG4gIHVzZVJvdXRlcigpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHB1c2g6IGplc3QuZm4oKSxcclxuICAgICAgcmVwbGFjZTogamVzdC5mbigpLFxyXG4gICAgICBwcmVmZXRjaDogamVzdC5mbigpLFxyXG4gICAgICBiYWNrOiBqZXN0LmZuKCksXHJcbiAgICAgIGZvcndhcmQ6IGplc3QuZm4oKSxcclxuICAgICAgcmVmcmVzaDogamVzdC5mbigpLFxyXG4gICAgfVxyXG4gIH0sXHJcbiAgdXNlU2VhcmNoUGFyYW1zKCkge1xyXG4gICAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXMoKVxyXG4gIH0sXHJcbiAgdXNlUGF0aG5hbWUoKSB7XHJcbiAgICByZXR1cm4gJy8nXHJcbiAgfSxcclxufSkpXHJcblxyXG4vLyBNb2NrIHRSUENcclxuamVzdC5tb2NrKCdAL2xpYi90cnBjJywgKCkgPT4gKHtcclxuICBhcGk6IHtcclxuICAgIHVzZVF1ZXJ5OiBqZXN0LmZuKCksXHJcbiAgICB1c2VNdXRhdGlvbjogamVzdC5mbigpLFxyXG4gIH0sXHJcbn0pKVxyXG5cclxuLy8gTW9jayBQcmlzbWFcclxuamVzdC5tb2NrKCdAcHJpc21hL2NsaWVudCcsICgpID0+ICh7XHJcbiAgUHJpc21hQ2xpZW50OiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XHJcbiAgICAkY29ubmVjdDogamVzdC5mbigpLFxyXG4gICAgJGRpc2Nvbm5lY3Q6IGplc3QuZm4oKSxcclxuICB9KSksXHJcbn0pKVxyXG5cclxuLy8gTW9jayBTdXBhYmFzZVxyXG5qZXN0Lm1vY2soJ0BzdXBhYmFzZS9zdXBhYmFzZS1qcycsICgpID0+ICh7XHJcbiAgY3JlYXRlQ2xpZW50OiBqZXN0LmZuKCgpID0+ICh7XHJcbiAgICBhdXRoOiB7XHJcbiAgICAgIHNpZ25JbjogamVzdC5mbigpLFxyXG4gICAgICBzaWduT3V0OiBqZXN0LmZuKCksXHJcbiAgICAgIGdldFVzZXI6IGplc3QuZm4oKSxcclxuICAgIH0sXHJcbiAgICBmcm9tOiBqZXN0LmZuKCgpID0+ICh7XHJcbiAgICAgIHNlbGVjdDogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXHJcbiAgICAgIGluc2VydDogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXHJcbiAgICAgIHVwZGF0ZTogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXHJcbiAgICAgIGRlbGV0ZTogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXHJcbiAgICAgIGVxOiBqZXN0LmZuKCkubW9ja1JldHVyblRoaXMoKSxcclxuICAgICAgc2luZ2xlOiBqZXN0LmZuKCksXHJcbiAgICAgIHRoZW46IGplc3QuZm4oKSxcclxuICAgIH0pKSxcclxuICB9KSksXHJcbn0pKSAiXSwibmFtZXMiOlsiamVzdCIsIm1vY2siLCJ1c2VSb3V0ZXIiLCJyb3V0ZSIsInBhdGhuYW1lIiwicXVlcnkiLCJhc1BhdGgiLCJwdXNoIiwiZm4iLCJwb3AiLCJyZWxvYWQiLCJiYWNrIiwicHJlZmV0Y2giLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsInVuZGVmaW5lZCIsImJlZm9yZVBvcFN0YXRlIiwiZXZlbnRzIiwib24iLCJvZmYiLCJlbWl0IiwiaXNGYWxsYmFjayIsInJlcGxhY2UiLCJmb3J3YXJkIiwicmVmcmVzaCIsInVzZVNlYXJjaFBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsInVzZVBhdGhuYW1lIiwiYXBpIiwidXNlUXVlcnkiLCJ1c2VNdXRhdGlvbiIsIlByaXNtYUNsaWVudCIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsIiRjb25uZWN0IiwiJGRpc2Nvbm5lY3QiLCJjcmVhdGVDbGllbnQiLCJhdXRoIiwic2lnbkluIiwic2lnbk91dCIsImdldFVzZXIiLCJmcm9tIiwic2VsZWN0IiwibW9ja1JldHVyblRoaXMiLCJpbnNlcnQiLCJ1cGRhdGUiLCJkZWxldGUiLCJlcSIsInNpbmdsZSIsInRoZW4iLCJnbG9iYWwiLCJmZXRjaCIsIlJlcXVlc3QiLCJ1cmwiLCJvcHRpb25zIiwibWV0aG9kIiwiaGVhZGVycyIsIk1hcCIsIk9iamVjdCIsImVudHJpZXMiLCJib2R5IiwiUmVzcG9uc2UiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwianNvbiIsIkpTT04iLCJwYXJzZSIsInRleHQiLCJzdHJpbmdpZnkiXSwibWFwcGluZ3MiOiI7QUFnQ0Esc0JBQXNCO0FBQ3RCQSxLQUFLQyxJQUFJLENBQUMsZUFBZSxJQUFPLENBQUE7UUFDOUJD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