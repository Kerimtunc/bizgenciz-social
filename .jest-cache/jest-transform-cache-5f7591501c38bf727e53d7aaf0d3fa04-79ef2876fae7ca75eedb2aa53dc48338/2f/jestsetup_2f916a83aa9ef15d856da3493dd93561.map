{"version":3,"sources":["C:\\kod\\yemekzen\\jest.setup.js"],"sourcesContent":["import '@testing-library/jest-dom'\r\n\r\n// Mock fetch API for tests\r\nglobal.fetch = jest.fn()\r\n\r\n// Mock Request and Response for API tests\r\nglobal.Request = class Request {\r\n  constructor(url, options = {}) {\r\n    this.url = url\r\n    this.method = options.method || 'GET'\r\n    this.headers = new Map(Object.entries(options.headers || {}))\r\n    this.body = options.body\r\n  }\r\n}\r\n\r\nglobal.Response = class Response {\r\n  constructor(body, options = {}) {\r\n    this.body = body\r\n    this.status = options.status || 200\r\n    this.statusText = options.statusText || 'OK'\r\n    this.headers = new Map(Object.entries(options.headers || {}))\r\n  }\r\n\r\n  async json() {\r\n    return typeof this.body === 'string' ? JSON.parse(this.body) : this.body\r\n  }\r\n\r\n  async text() {\r\n    return typeof this.body === 'string' ? this.body : JSON.stringify(this.body)\r\n  }\r\n}\r\n\r\n// Mock Next.js router\r\njest.mock('next/router', () => ({\r\n  useRouter() {\r\n    return {\r\n      route: '/',\r\n      pathname: '/',\r\n      query: {},\r\n      asPath: '/',\r\n      push: jest.fn(),\r\n      pop: jest.fn(),\r\n      reload: jest.fn(),\r\n      back: jest.fn(),\r\n      prefetch: jest.fn().mockResolvedValue(undefined),\r\n      beforePopState: jest.fn(),\r\n      events: {\r\n        on: jest.fn(),\r\n        off: jest.fn(),\r\n        emit: jest.fn(),\r\n      },\r\n      isFallback: false,\r\n    }\r\n  },\r\n}))\r\n\r\n// Mock Next.js navigation\r\njest.mock('next/navigation', () => ({\r\n  useRouter() {\r\n    return {\r\n      push: jest.fn(),\r\n      replace: jest.fn(),\r\n      prefetch: jest.fn(),\r\n      back: jest.fn(),\r\n      forward: jest.fn(),\r\n      refresh: jest.fn(),\r\n    }\r\n  },\r\n  useSearchParams() {\r\n    return new URLSearchParams()\r\n  },\r\n  usePathname() {\r\n    return '/'\r\n  },\r\n}))\r\n\r\n// Mock tRPC\r\njest.mock('@/lib/trpc', () => ({\r\n  api: {\r\n    useQuery: jest.fn(),\r\n    useMutation: jest.fn(),\r\n  },\r\n}))\r\n\r\n// Mock Prisma\r\njest.mock('@prisma/client', () => ({\r\n  PrismaClient: jest.fn().mockImplementation(() => ({\r\n    $connect: jest.fn(),\r\n    $disconnect: jest.fn(),\r\n  })),\r\n}))\r\n\r\n// Mock Supabase\r\njest.mock('@supabase/supabase-js', () => ({\r\n  createClient: jest.fn(() => ({\r\n    auth: {\r\n      signIn: jest.fn(),\r\n      signOut: jest.fn(),\r\n      getUser: jest.fn(),\r\n    },\r\n    from: jest.fn(() => ({\r\n      select: jest.fn().mockReturnThis(),\r\n      insert: jest.fn().mockReturnThis(),\r\n      update: jest.fn().mockReturnThis(),\r\n      delete: jest.fn().mockReturnThis(),\r\n      eq: jest.fn().mockReturnThis(),\r\n      single: jest.fn(),\r\n      then: jest.fn(),\r\n    })),\r\n  })),\r\n})) "],"names":["jest","mock","useRouter","route","pathname","query","asPath","push","fn","pop","reload","back","prefetch","mockResolvedValue","undefined","beforePopState","events","on","off","emit","isFallback","replace","forward","refresh","useSearchParams","URLSearchParams","usePathname","api","useQuery","useMutation","PrismaClient","mockImplementation","$connect","$disconnect","createClient","auth","signIn","signOut","getUser","from","select","mockReturnThis","insert","update","delete","eq","single","then","global","fetch","Request","url","options","method","headers","Map","Object","entries","body","Response","status","statusText","json","JSON","parse","text","stringify"],"mappings":"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"}