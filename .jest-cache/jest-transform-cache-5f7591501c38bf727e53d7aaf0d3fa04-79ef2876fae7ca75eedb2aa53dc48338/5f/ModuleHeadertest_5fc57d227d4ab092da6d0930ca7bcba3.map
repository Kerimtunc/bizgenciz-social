{"version":3,"sources":["C:\\kod\\yemekzen\\tests\\components\\ModuleHeader.test.tsx"],"sourcesContent":["import { render, screen } from '@testing-library/react'\r\nimport ModuleHeader from '../../components/common/ModuleHeader'\r\n\r\ndescribe('ModuleHeader', () => {\r\n  const defaultProps = {\r\n    title: 'Test Module',\r\n    subtitle: 'Test module description',\r\n    icon: 'üçΩÔ∏è'\r\n  }\r\n\r\n  it('renders the title', () => {\r\n    render(<ModuleHeader {...defaultProps} />)\r\n    \r\n    const title = screen.getByText('Test Module')\r\n    expect(title).toBeInTheDocument()\r\n  })\r\n\r\n  it('renders the subtitle when provided', () => {\r\n    render(<ModuleHeader {...defaultProps} />)\r\n    \r\n    const subtitle = screen.getByText('Test module description')\r\n    expect(subtitle).toBeInTheDocument()\r\n  })\r\n\r\n  it('renders the icon when provided', () => {\r\n    render(<ModuleHeader {...defaultProps} />)\r\n    \r\n    // Icon'un varlƒ±ƒüƒ±nƒ± kontrol etmek i√ßin getAllByText kullanƒ±yoruz\r\n    const titleElements = screen.getAllByText('Test Module')\r\n    expect(titleElements.length).toBeGreaterThan(0)\r\n    \r\n    // En az bir element'te icon olmalƒ±\r\n    const hasIcon = titleElements.some(element => \r\n      element.textContent?.includes('üçΩÔ∏è')\r\n    )\r\n    expect(hasIcon).toBe(true)\r\n  })\r\n\r\n  it('does not render subtitle when not provided', () => {\r\n    render(<ModuleHeader title=\"Test Module\" icon=\"üçΩÔ∏è\" />)\r\n    \r\n    const subtitle = screen.queryByText('Test module description')\r\n    expect(subtitle).not.toBeInTheDocument()\r\n  })\r\n\r\n  it('renders children when provided', () => {\r\n    render(\r\n      <ModuleHeader {...defaultProps}>\r\n        <button>Test Button</button>\r\n      </ModuleHeader>\r\n    )\r\n    \r\n    const button = screen.getByRole('button', { name: 'Test Button' })\r\n    expect(button).toBeInTheDocument()\r\n  })\r\n\r\n  it('renders without icon when not provided', () => {\r\n    render(<ModuleHeader title=\"Test Module\" subtitle=\"Test description\" />)\r\n    \r\n    const titleElement = screen.getByText('Test Module')\r\n    expect(titleElement).toBeInTheDocument()\r\n    \r\n    // Icon olmamalƒ±\r\n    const iconElement = screen.queryByText('üçΩÔ∏è')\r\n    expect(iconElement).not.toBeInTheDocument()\r\n  })\r\n}) "],"names":["describe","defaultProps","title","subtitle","icon","it","render","ModuleHeader","screen","getByText","expect","toBeInTheDocument","titleElements","getAllByText","length","toBeGreaterThan","hasIcon","some","element","textContent","includes","toBe","queryByText","not","button","getByRole","name","titleElement","iconElement"],"mappings":";;;;;uBAA+B;qEACN;;;;;;AAEzBA,SAAS,gBAAgB;IACvB,MAAMC,eAAe;QACnBC,OAAO;QACPC,UAAU;QACVC,MAAM;IACR;IAEAC,GAAG,qBAAqB;QACtBC,IAAAA,aAAM,gBAAC,qBAACC,qBAAY;YAAE,GAAGN,YAAY;;QAErC,MAAMC,QAAQM,aAAM,CAACC,SAAS,CAAC;QAC/BC,OAAOR,OAAOS,iBAAiB;IACjC;IAEAN,GAAG,sCAAsC;QACvCC,IAAAA,aAAM,gBAAC,qBAACC,qBAAY;YAAE,GAAGN,YAAY;;QAErC,MAAME,WAAWK,aAAM,CAACC,SAAS,CAAC;QAClCC,OAAOP,UAAUQ,iBAAiB;IACpC;IAEAN,GAAG,kCAAkC;QACnCC,IAAAA,aAAM,gBAAC,qBAACC,qBAAY;YAAE,GAAGN,YAAY;;QAErC,iEAAiE;QACjE,MAAMW,gBAAgBJ,aAAM,CAACK,YAAY,CAAC;QAC1CH,OAAOE,cAAcE,MAAM,EAAEC,eAAe,CAAC;QAE7C,mCAAmC;QACnC,MAAMC,UAAUJ,cAAcK,IAAI,CAACC,CAAAA,UACjCA,QAAQC,WAAW,EAAEC,SAAS;QAEhCV,OAAOM,SAASK,IAAI,CAAC;IACvB;IAEAhB,GAAG,8CAA8C;QAC/CC,IAAAA,aAAM,gBAAC,qBAACC,qBAAY;YAACL,OAAM;YAAcE,MAAK;;QAE9C,MAAMD,WAAWK,aAAM,CAACc,WAAW,CAAC;QACpCZ,OAAOP,UAAUoB,GAAG,CAACZ,iBAAiB;IACxC;IAEAN,GAAG,kCAAkC;QACnCC,IAAAA,aAAM,gBACJ,qBAACC,qBAAY;YAAE,GAAGN,YAAY;sBAC5B,cAAA,qBAACuB;0BAAO;;;QAIZ,MAAMA,SAAShB,aAAM,CAACiB,SAAS,CAAC,UAAU;YAAEC,MAAM;QAAc;QAChEhB,OAAOc,QAAQb,iBAAiB;IAClC;IAEAN,GAAG,0CAA0C;QAC3CC,IAAAA,aAAM,gBAAC,qBAACC,qBAAY;YAACL,OAAM;YAAcC,UAAS;;QAElD,MAAMwB,eAAenB,aAAM,CAACC,SAAS,CAAC;QACtCC,OAAOiB,cAAchB,iBAAiB;QAEtC,gBAAgB;QAChB,MAAMiB,cAAcpB,aAAM,CAACc,WAAW,CAAC;QACvCZ,OAAOkB,aAAaL,GAAG,CAACZ,iBAAiB;IAC3C;AACF"}