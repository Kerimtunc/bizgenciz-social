{"version":3,"sources":["C:\\kod\\yemekzen\\tests\\api\\health.test.ts"],"sourcesContent":["import { GET } from '../../app/api/health/route'\r\n\r\ndescribe('Health API', () => {\r\n  beforeEach(() => {\r\n    // Reset fetch mock before each test\r\n    jest.clearAllMocks()\r\n  })\r\n\r\n  it('returns 200 status with health information', async () => {\r\n    const request = new Request('http://localhost:3000/api/health')\r\n    \r\n    const response = await GET(request)\r\n    \r\n    expect(response.status).toBe(200)\r\n    \r\n    const data = await response.json()\r\n    expect(data).toHaveProperty('status')\r\n    expect(data).toHaveProperty('timestamp')\r\n    expect(data).toHaveProperty('version')\r\n    expect(data.status).toBe('healthy')\r\n  })\r\n\r\n  it('includes required health check fields', async () => {\r\n    const request = new Request('http://localhost:3000/api/health')\r\n    \r\n    const response = await GET(request)\r\n    const data = await response.json()\r\n    \r\n    expect(data).toHaveProperty('database')\r\n    expect(data).toHaveProperty('uptime')\r\n    expect(data).toHaveProperty('environment')\r\n  })\r\n\r\n  it('returns correct response format', async () => {\r\n    const request = new Request('http://localhost:3000/api/health')\r\n    \r\n    const response = await GET(request)\r\n    const data = await response.json()\r\n    \r\n    // Check all required fields\r\n    expect(data).toHaveProperty('status')\r\n    expect(data).toHaveProperty('timestamp')\r\n    expect(data).toHaveProperty('version')\r\n    expect(data).toHaveProperty('environment')\r\n    expect(data).toHaveProperty('database')\r\n    expect(data).toHaveProperty('uptime')\r\n    expect(data).toHaveProperty('memory')\r\n    \r\n    // Check data types\r\n    expect(typeof data.status).toBe('string')\r\n    expect(typeof data.timestamp).toBe('string')\r\n    expect(typeof data.version).toBe('string')\r\n    expect(typeof data.environment).toBe('string')\r\n    expect(typeof data.database).toBe('string')\r\n    expect(typeof data.uptime).toBe('number')\r\n    expect(typeof data.memory).toBe('object')\r\n  })\r\n}) "],"names":["describe","beforeEach","jest","clearAllMocks","it","request","Request","response","GET","expect","status","toBe","data","json","toHaveProperty","timestamp","version","environment","database","uptime","memory"],"mappings":";;;;uBAAoB;AAEpBA,SAAS,cAAc;IACrBC,WAAW;QACT,oCAAoC;QACpCC,KAAKC,aAAa;IACpB;IAEAC,GAAG,8CAA8C;QAC/C,MAAMC,UAAU,IAAIC,QAAQ;QAE5B,MAAMC,WAAW,MAAMC,IAAAA,UAAG,EAACH;QAE3BI,OAAOF,SAASG,MAAM,EAAEC,IAAI,CAAC;QAE7B,MAAMC,OAAO,MAAML,SAASM,IAAI;QAChCJ,OAAOG,MAAME,cAAc,CAAC;QAC5BL,OAAOG,MAAME,cAAc,CAAC;QAC5BL,OAAOG,MAAME,cAAc,CAAC;QAC5BL,OAAOG,KAAKF,MAAM,EAAEC,IAAI,CAAC;IAC3B;IAEAP,GAAG,yCAAyC;QAC1C,MAAMC,UAAU,IAAIC,QAAQ;QAE5B,MAAMC,WAAW,MAAMC,IAAAA,UAAG,EAACH;QAC3B,MAAMO,OAAO,MAAML,SAASM,IAAI;QAEhCJ,OAAOG,MAAME,cAAc,CAAC;QAC5BL,OAAOG,MAAME,cAAc,CAAC;QAC5BL,OAAOG,MAAME,cAAc,CAAC;IAC9B;IAEAV,GAAG,mCAAmC;QACpC,MAAMC,UAAU,IAAIC,QAAQ;QAE5B,MAAMC,WAAW,MAAMC,IAAAA,UAAG,EAACH;QAC3B,MAAMO,OAAO,MAAML,SAASM,IAAI;QAEhC,4BAA4B;QAC5BJ,OAAOG,MAAME,cAAc,CAAC;QAC5BL,OAAOG,MAAME,cAAc,CAAC;QAC5BL,OAAOG,MAAME,cAAc,CAAC;QAC5BL,OAAOG,MAAME,cAAc,CAAC;QAC5BL,OAAOG,MAAME,cAAc,CAAC;QAC5BL,OAAOG,MAAME,cAAc,CAAC;QAC5BL,OAAOG,MAAME,cAAc,CAAC;QAE5B,mBAAmB;QACnBL,OAAO,OAAOG,KAAKF,MAAM,EAAEC,IAAI,CAAC;QAChCF,OAAO,OAAOG,KAAKG,SAAS,EAAEJ,IAAI,CAAC;QACnCF,OAAO,OAAOG,KAAKI,OAAO,EAAEL,IAAI,CAAC;QACjCF,OAAO,OAAOG,KAAKK,WAAW,EAAEN,IAAI,CAAC;QACrCF,OAAO,OAAOG,KAAKM,QAAQ,EAAEP,IAAI,CAAC;QAClCF,OAAO,OAAOG,KAAKO,MAAM,EAAER,IAAI,CAAC;QAChCF,OAAO,OAAOG,KAAKQ,MAAM,EAAET,IAAI,CAAC;IAClC;AACF"}