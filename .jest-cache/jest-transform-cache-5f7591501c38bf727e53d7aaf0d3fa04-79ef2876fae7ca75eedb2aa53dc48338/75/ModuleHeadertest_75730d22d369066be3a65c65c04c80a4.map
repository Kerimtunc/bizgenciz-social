{"version":3,"sources":["C:\\kod\\yemekzen\\tests\\components\\ModuleHeader.test.tsx"],"sourcesContent":["import { render, screen } from '@testing-library/react'\r\nimport ModuleHeader from '../../components/common/ModuleHeader'\r\n\r\ndescribe('ModuleHeader', () => {\r\n  const defaultProps = {\r\n    title: 'Test Module',\r\n    subtitle: 'Test module description',\r\n    icon: 'üçΩÔ∏è'\r\n  }\r\n\r\n  it('renders the title', () => {\r\n    render(<ModuleHeader {...defaultProps} />)\r\n    \r\n    const title = screen.getByText((content, element) => {\r\n      return element?.textContent?.includes('Test Module') || false\r\n    })\r\n    expect(title).toBeInTheDocument()\r\n  })\r\n\r\n  it('renders the subtitle when provided', () => {\r\n    render(<ModuleHeader {...defaultProps} />)\r\n    \r\n    const subtitle = screen.getByText('Test module description')\r\n    expect(subtitle).toBeInTheDocument()\r\n  })\r\n\r\n  it('renders the icon when provided', () => {\r\n    render(<ModuleHeader {...defaultProps} />)\r\n    \r\n    // Icon'un varlƒ±ƒüƒ±nƒ± kontrol etmek i√ßin text matcher kullanƒ±yoruz\r\n    const titleWithIcon = screen.getByText((content, element) => {\r\n      return (element?.textContent?.includes('Test Module') && element?.textContent?.includes('üçΩÔ∏è')) || false\r\n    })\r\n    expect(titleWithIcon).toBeInTheDocument()\r\n  })\r\n\r\n  it('does not render subtitle when not provided', () => {\r\n    render(<ModuleHeader title=\"Test Module\" icon=\"üçΩÔ∏è\" />)\r\n    \r\n    const subtitle = screen.queryByText('Test module description')\r\n    expect(subtitle).not.toBeInTheDocument()\r\n  })\r\n\r\n  it('renders children when provided', () => {\r\n    render(\r\n      <ModuleHeader {...defaultProps}>\r\n        <button>Test Button</button>\r\n      </ModuleHeader>\r\n    )\r\n    \r\n    const button = screen.getByRole('button', { name: 'Test Button' })\r\n    expect(button).toBeInTheDocument()\r\n  })\r\n\r\n  it('renders without icon when not provided', () => {\r\n    render(<ModuleHeader title=\"Test Module\" subtitle=\"Test description\" />)\r\n    \r\n    const titleElement = screen.getByText((content, element) => {\r\n      return element?.textContent?.includes('Test Module') || false\r\n    })\r\n    expect(titleElement).toBeInTheDocument()\r\n    \r\n    // Icon olmamalƒ±\r\n    const iconElement = screen.queryByText('üçΩÔ∏è')\r\n    expect(iconElement).not.toBeInTheDocument()\r\n  })\r\n}) "],"names":["describe","defaultProps","title","subtitle","icon","it","render","ModuleHeader","screen","getByText","content","element","textContent","includes","expect","toBeInTheDocument","titleWithIcon","queryByText","not","button","getByRole","name","titleElement","iconElement"],"mappings":";;;;;uBAA+B;qEACN;;;;;;AAEzBA,SAAS,gBAAgB;IACvB,MAAMC,eAAe;QACnBC,OAAO;QACPC,UAAU;QACVC,MAAM;IACR;IAEAC,GAAG,qBAAqB;QACtBC,IAAAA,aAAM,gBAAC,qBAACC,qBAAY;YAAE,GAAGN,YAAY;;QAErC,MAAMC,QAAQM,aAAM,CAACC,SAAS,CAAC,CAACC,SAASC;YACvC,OAAOA,SAASC,aAAaC,SAAS,kBAAkB;QAC1D;QACAC,OAAOZ,OAAOa,iBAAiB;IACjC;IAEAV,GAAG,sCAAsC;QACvCC,IAAAA,aAAM,gBAAC,qBAACC,qBAAY;YAAE,GAAGN,YAAY;;QAErC,MAAME,WAAWK,aAAM,CAACC,SAAS,CAAC;QAClCK,OAAOX,UAAUY,iBAAiB;IACpC;IAEAV,GAAG,kCAAkC;QACnCC,IAAAA,aAAM,gBAAC,qBAACC,qBAAY;YAAE,GAAGN,YAAY;;QAErC,iEAAiE;QACjE,MAAMe,gBAAgBR,aAAM,CAACC,SAAS,CAAC,CAACC,SAASC;YAC/C,OAAO,AAACA,SAASC,aAAaC,SAAS,kBAAkBF,SAASC,aAAaC,SAAS,UAAW;QACrG;QACAC,OAAOE,eAAeD,iBAAiB;IACzC;IAEAV,GAAG,8CAA8C;QAC/CC,IAAAA,aAAM,gBAAC,qBAACC,qBAAY;YAACL,OAAM;YAAcE,MAAK;;QAE9C,MAAMD,WAAWK,aAAM,CAACS,WAAW,CAAC;QACpCH,OAAOX,UAAUe,GAAG,CAACH,iBAAiB;IACxC;IAEAV,GAAG,kCAAkC;QACnCC,IAAAA,aAAM,gBACJ,qBAACC,qBAAY;YAAE,GAAGN,YAAY;sBAC5B,cAAA,qBAACkB;0BAAO;;;QAIZ,MAAMA,SAASX,aAAM,CAACY,SAAS,CAAC,UAAU;YAAEC,MAAM;QAAc;QAChEP,OAAOK,QAAQJ,iBAAiB;IAClC;IAEAV,GAAG,0CAA0C;QAC3CC,IAAAA,aAAM,gBAAC,qBAACC,qBAAY;YAACL,OAAM;YAAcC,UAAS;;QAElD,MAAMmB,eAAed,aAAM,CAACC,SAAS,CAAC,CAACC,SAASC;YAC9C,OAAOA,SAASC,aAAaC,SAAS,kBAAkB;QAC1D;QACAC,OAAOQ,cAAcP,iBAAiB;QAEtC,gBAAgB;QAChB,MAAMQ,cAAcf,aAAM,CAACS,WAAW,CAAC;QACvCH,OAAOS,aAAaL,GAAG,CAACH,iBAAiB;IAC3C;AACF"}