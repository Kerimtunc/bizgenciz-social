// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client already defined above

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Prisma models automatically translated from `veriler.md` SQL definitions.
// IDs standardized to UUIDs for safety and multi-tenant compatibility.

generator client {
  provider = "prisma-client-js"
}

enum TenantType {
  BUSINESS
  CONSUMER
  SUPER_ADMIN
}

enum TenantStatus {
  ACTIVE
  SUSPENDED
  PENDING_APPROVAL
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}

enum Interval {
  MONTHLY
  YEARLY
}

enum FeatureCategory {
  BASIC
  PREMIUM
  ENTERPRISE
}

enum OrderType {
  DINE_IN
  TAKEOUT
  DELIVERY
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

// --- Core models ---
model Tenant {
  id                 String   @id @default(uuid()) @db.Uuid
  tenantType         TenantType
  status             TenantStatus
  subscriptionStatus SubscriptionStatus
  commissionRate     Decimal? @db.Decimal(5,2)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  deletedAt          DateTime?

  businessProfile    BusinessProfile?
  users              User[]
  plans              Plan[]
  products           Product[]
  categories         Category[]
  orders             Order[]
}

model User {
  id            String   @id @default(uuid()) @db.Uuid
  tenant        Tenant   @relation(fields: [tenantId], references: [id])
  tenantId      String   @db.Uuid
  name          String
  email         String   @unique
  phone         String?
  roleId        String?  @db.Uuid
  avatar        String?
  isActive      Boolean  @default(true)
  creditBalance Decimal  @default(0) @db.Decimal(10,2)
  loyaltyPoints Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime?

  role          UserRole? @relation(fields: [roleId], references: [id])
}

model UserRole {
  id    String @id @default(uuid()) @db.Uuid
  name  String
  users User[]
}

model BusinessProfile {
  id           String   @id @default(uuid()) @db.Uuid
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
  tenantId     String   @db.Uuid
  businessName String
  businessType String?
  address      String?
  phone        String?
  email        String?
  logoUrl      String?
  primaryColor String?
  secondaryColor String?
  accentColor  String?
  fontFamily   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deletedAt    DateTime?
}

model Plan {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  price     Decimal  @db.Decimal(10,2)
  interval  Interval
  maxProducts Int?
  maxCategories Int?
  maxStaff  Int?
  setupFee  Decimal? @db.Decimal(10,2)
  trialDays Int?     @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  planFeatures PlanFeature[]
}

model Feature {
  id          String   @id @default(uuid()) @db.Uuid
  featureCode String   @unique
  name        String
  description String?
  category    FeatureCategory
  apiEndpoint String?
  isActive    Boolean  @default(true)
  dependencies String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  planFeatures PlanFeature[]
}

model PlanFeature {
  id        String  @id @default(uuid()) @db.Uuid
  plan      Plan    @relation(fields: [planId], references: [id])
  planId    String  @db.Uuid
  feature   Feature @relation(fields: [featureId], references: [id])
  featureId String  @db.Uuid
  isIncluded Boolean @default(true)
  limitValue Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}

// --- Operational ---
model Category {
  id         String   @id @default(uuid()) @db.Uuid
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  tenantId   String   @db.Uuid
  name       String
  description String?
  icon       String?
  color      String?
  orderIndex Int     @default(0)
  seasonality String?
  discountPercentage Decimal @default(0) @db.Decimal(5,2)
  isReadyCategory Boolean @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deletedAt  DateTime?

  products   Product[]
}

model Product {
  id           String   @id @default(uuid()) @db.Uuid
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
  tenantId     String   @db.Uuid
  category     Category @relation(fields: [categoryId], references: [id])
  categoryId   String   @db.Uuid
  name         String
  description  String?
  price        Decimal  @db.Decimal(10,2)
  imageUrl     String?
  isFeatured   Boolean  @default(false)
  isPopular    Boolean  @default(false)
  prepTime     Int?
  calories     Int?
  allergens    String?
  originalPrice Decimal? @db.Decimal(10,2)
  discountPercentage Decimal? @db.Decimal(5,2)
  timeLimitedOffer Boolean? @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deletedAt    DateTime?
}

model Order {
  id           String   @id @default(uuid()) @db.Uuid
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
  tenantId     String   @db.Uuid
  customerId   String?  @db.Uuid
  tableId      String?  @db.Uuid
  orderType    OrderType
  status       OrderStatus
  customerName String?
  customerPhone String?
  totalAmount  Decimal  @db.Decimal(10,2)
  subtotal     Decimal  @db.Decimal(10,2)
  taxAmount    Decimal? @db.Decimal(10,2)
  paymentAmount Decimal @db.Decimal(10,2)
  paymentStatus PaymentStatus @default(PENDING)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deletedAt    DateTime?

  items OrderItem[]
}

model OrderItem {
  id         String  @id @default(uuid()) @db.Uuid
  order      Order   @relation(fields: [orderId], references: [id])
  orderId    String  @db.Uuid
  product    Product @relation(fields: [productId], references: [id])
  productId  String  @db.Uuid
  quantity   Int
  unitPrice  Decimal @db.Decimal(10,2)
  totalPrice Decimal @db.Decimal(10,2)
  customizations String?
  notes      String?
  status     String? @default("PENDING")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deletedAt  DateTime?
}

model Customer {
  id           String   @id @default(uuid()) @db.Uuid
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
  tenantId     String   @db.Uuid
  name         String
  email        String?
  phone        String?
  address      String?
  birthDate    DateTime?
  loyaltyTierId String? @db.Uuid
  totalOrders  Int      @default(0)
  totalSpent   Decimal  @default(0) @db.Decimal(10,2)
  loyaltyPoints Int     @default(0)
  segment      String?
  activityStatus String? @default("ACTIVE")
  isAnonymous  Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deletedAt    DateTime?
}

model Table {
  id         String   @id @default(uuid()) @db.Uuid
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  tenantId   String   @db.Uuid
  tableNumber String
  location   String?
  capacity   Int     @default(4)
  status     String  @default("AVAILABLE")
  qrCode     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deletedAt  DateTime?
}

model Staff {
  id         String   @id @default(uuid()) @db.Uuid
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  tenantId   String   @db.Uuid
  userId     String   @db.Uuid
  name       String
  role       String
  phone      String?
  email      String?
  shiftStart String?
  shiftEnd   String?
  hourlyRate Decimal? @db.Decimal(10,2)
  hireDate   DateTime?
  status     String?  @default("ACTIVE")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deletedAt  DateTime?
}

// Additional models (analytics, courier, auditing) can be added similarly as needed.
