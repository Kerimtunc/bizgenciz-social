// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // Performance optimizations
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User model
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String   @map("password_hash")
  role         UserRole @default(STAFF)
  name         String
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  orders Order[]

  @@map("users")
}

// Category model
model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  imageUrl    String?   @map("image_url")
  sortOrder   Int       @default(0) @map("sort_order")
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  products Product[]

  @@map("categories")
}

// Product model
model Product {
  id          String   @id @default(cuid())
  categoryId  String   @map("category_id")
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  imageUrl    String?  @map("image_url")
  isAvailable Boolean  @default(true) @map("is_available")
  sortOrder   Int      @default(0) @map("sort_order")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@map("products")
}

// Order model
model Order {
  id          String      @id @default(cuid())
  userId      String?     @map("user_id")
  tableNumber Int?
  status      OrderStatus @default(PENDING)
  totalAmount Decimal     @db.Decimal(10, 2) @map("total_amount")
  notes       String?
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  // Relations
  user       User?        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

// OrderItem model
model OrderItem {
  id        String  @id @default(cuid())
  orderId   String  @map("order_id")
  productId String  @map("product_id")
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  notes     String?
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// QR Code model
model QRCode {
  id          String   @id @default(cuid())
  tableNumber Int      @unique @map("table_number")
  qrCodeUrl   String   @map("qr_code_url")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("qr_codes")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  STAFF
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERED
  CANCELLED
} 