// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// University model
model University {
  id          Int      @id @default(autoincrement())
  name        String
  city        String
  country     String
  website     String?
  logoUrl     String?  @map("logo_url")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  // Relations
  students    Student[]
  groups      Group[]

  @@map("universities")
}

// Student model
model Student {
  id            Int      @id @default(autoincrement())
  universityId  Int      @map("university_id")
  name          String
  email         String   @unique
  phone         String?
  avatar        String?
  bio           String?
  major         String?
  year          Int?
  isActive      Boolean  @default(true) @map("is_active")
  isVerified    Boolean  @default(false) @map("is_verified")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")

  // Relations
  university    University @relation(fields: [universityId], references: [id])
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  friendships   Friendship[] @relation("StudentFriendships")
  friends       Friendship[] @relation("FriendStudents")
  groupMembers  GroupMember[]
  messages      Message[] @relation("SenderMessages")
  receivedMessages Message[] @relation("ReceiverMessages")

  @@map("students")
}

// Post model
model Post {
  id          Int      @id @default(autoincrement())
  studentId   Int      @map("student_id")
  content     String
  imageUrl    String?  @map("image_url")
  isPublic    Boolean  @default(true) @map("is_public")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  // Relations
  student     Student   @relation(fields: [studentId], references: [id])
  comments    Comment[]
  likes       Like[]

  @@map("posts")
}

// Comment model
model Comment {
  id        Int      @id @default(autoincrement())
  postId    Int      @map("post_id")
  studentId Int      @map("student_id")
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relations
  post      Post     @relation(fields: [postId], references: [id])
  student   Student  @relation(fields: [studentId], references: [id])

  @@map("comments")
}

// Like model
model Like {
  id        Int      @id @default(autoincrement())
  postId    Int      @map("post_id")
  studentId Int      @map("student_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  post      Post     @relation(fields: [postId], references: [id])
  student   Student  @relation(fields: [studentId], references: [id])

  @@unique([postId, studentId])
  @@map("likes")
}

// Friendship model
model Friendship {
  id          Int      @id @default(autoincrement())
  studentId   Int      @map("student_id")
  friendId    Int      @map("friend_id")
  status      String   // PENDING, ACCEPTED, REJECTED
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")

  // Relations
  student     Student  @relation("StudentFriendships", fields: [studentId], references: [id])
  friend      Student  @relation("FriendStudents", fields: [friendId], references: [id])

  @@unique([studentId, friendId])
  @@map("friendships")
}

// Group model
model Group {
  id            Int      @id @default(autoincrement())
  universityId  Int      @map("university_id")
  name          String
  description   String?
  imageUrl      String?  @map("image_url")
  isPrivate     Boolean  @default(false) @map("is_private")
  maxMembers    Int?     @map("max_members")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")

  // Relations
  university    University    @relation(fields: [universityId], references: [id])
  members       GroupMember[]

  @@map("groups")
}

// GroupMember model
model GroupMember {
  id        Int      @id @default(autoincrement())
  groupId   Int      @map("group_id")
  studentId Int      @map("student_id")
  role      String   @default("MEMBER") // ADMIN, MODERATOR, MEMBER
  joinedAt  DateTime @default(now()) @map("joined_at")

  // Relations
  group     Group    @relation(fields: [groupId], references: [id])
  student   Student  @relation(fields: [studentId], references: [id])

  @@unique([groupId, studentId])
  @@map("group_members")
}

// Message model
model Message {
  id          Int      @id @default(autoincrement())
  senderId    Int      @map("sender_id")
  receiverId  Int      @map("receiver_id")
  content     String
  isRead      Boolean  @default(false) @map("is_read")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  sender      Student  @relation("SenderMessages", fields: [senderId], references: [id])
  receiver    Student  @relation("ReceiverMessages", fields: [receiverId], references: [id])

  @@map("messages")
} 