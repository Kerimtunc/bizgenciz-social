name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================
  # LINTING VE QUALITY ASSURANCE
  # ============================================
  lint:
    name: Lint and Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --frozen-lockfile
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Run TypeScript check
      run: npx tsc --noEmit
      
    - name: Run Hadolint (Dockerfile linting)
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: |
          Dockerfile
          Dockerfile.dev
        format: sarif
        output-file: hadolint-report.sarif
        
    - name: Run YAML linting
      run: |
        pip install yamllint
        yamllint docker-compose.yml docker-compose.prod.yml

  # ============================================
  # TESTING
  # ============================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      postgres:
        image: postgres:15.3-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --frozen-lockfile
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Setup test environment
      run: |
        cp env.example .env.test
        echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db" >> .env.test
        echo "DIRECT_URL=postgresql://test_user:test_password@localhost:5432/test_db" >> .env.test
        
    - name: Run database migrations
      run: |
        npx prisma generate
        npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        
    - name: Run unit tests
      run: npm test
      
    - name: Run E2E tests
      run: npm run test:headed
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db

  # ============================================
  # BUILD VE SECURITY SCAN
  # ============================================
  build:
    name: Build and Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --frozen-lockfile
      
    - name: Build application
      run: npm run build
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # ============================================
  # DOCKER BUILD VE PUSH
  # ============================================
  docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
          
    - name: Build and push development image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.dev
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push production image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}-prod
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ============================================
  # DEPLOYMENT (Production)
  # ============================================
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to server
      run: |
        echo "Deployment to production server"
        # Burada deployment scriptleri çalıştırılacak
        # Örnek: SSH ile sunucuya bağlanıp docker-compose.prod.yml çalıştırma 