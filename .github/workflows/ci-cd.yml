name: Hybrid CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deploy environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'

jobs:
  # Self-hosted runner ile local testler
  local-tests:
    name: Local Tests (Self-Hosted)
    runs-on: self-hosted
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --no-audit --no-fund
      
    - name: Run linting
      run: npm run lint
      
    - name: Run type checking
      run: npx tsc --noEmit
      
    - name: Run unit tests
      run: npm test
      
    - name: Run E2E tests
      run: npm run test:e2e
      
    - name: Build application
      run: npm run build
      
    - name: Show runner info
      run: |
        echo "Runner OS: $RUNNER_OS"
        echo "Runner Architecture: $RUNNER_ARCH"
        echo "Runner Name: $RUNNER_NAME"
        echo "Working Directory: $GITHUB_WORKSPACE"
        echo "Node.js Version: $(node --version)"
        echo "NPM Version: $(npm --version)"
        
    - name: Upload local test results
      uses: actions/upload-artifact@v4
      with:
        name: local-test-results
        path: |
          test-results/
          playwright-report/
          coverage/
        retention-days: 30

  # Cross-platform testing (GitHub hosted runners)
  cross-platform-tests:
    name: Cross-Platform Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [20, 22]
        
    services:
      postgres:
        image: postgres:15.3-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --no-audit --no-fund
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Setup test environment
      run: |
        cp env.example .env.test
        echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db" >> .env.test
        echo "DIRECT_URL=postgresql://test_user:test_password@localhost:5432/test_db" >> .env.test
        echo "NODE_ENV=test" >> .env.test
        echo "JWT_SECRET=test-jwt-secret-key-for-testing-only" >> .env.test
        echo "NEXTAUTH_SECRET=test-nextauth-secret-key-for-testing-only" >> .env.test
        echo "NEXT_PUBLIC_SUPABASE_URL=https://test.supabase.co" >> .env.test
        echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=test-anon-key" >> .env.test
        
    - name: Run database migrations
      run: |
        npx prisma generate
        npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        
    - name: Run linting
      run: npm run lint
      
    - name: Run type checking
      run: npx tsc --noEmit
      
    - name: Run unit tests
      run: npm test
      
    - name: Run unit tests with coverage
      run: npm run test:coverage
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        
    - name: Run E2E tests
      run: npm run test:e2e
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        
    - name: Upload cross-platform test results
      uses: actions/upload-artifact@v4
      with:
        name: cross-platform-results-${{ matrix.os }}-${{ matrix.node-version }}
        path: |
          test-results/
          playwright-report/
          coverage/
        retention-days: 30

  # Security scanning (GitHub hosted)
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: cross-platform-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --no-audit --no-fund
        
    - name: Run npm audit
      run: npm audit --audit-level=moderate
        
    - name: Run Snyk security scan
      if: secrets.SNYK_TOKEN != ''
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --all-projects
        
    - name: Skip Snyk scan (no token)
      if: secrets.SNYK_TOKEN == ''
      run: echo "Skipping Snyk scan - SNYK_TOKEN not configured"
        
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # Build and optimize (GitHub hosted)
  build:
    name: Build and Optimize
    runs-on: ubuntu-latest
    needs: [cross-platform-tests, security]
    strategy:
      matrix:
        node-version: [18]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --no-audit --no-fund
        
    - name: Build application
      run: npm run build
        
    - name: Build analysis
      run: npm run build:analyze
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          .next/
          out/
        retention-days: 7

  # Docker builds (GitHub hosted)
  docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push development image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.dev
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        
    - name: Build and push production image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}-prod
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Staging deployment (GitHub hosted)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying BizGenciz to staging environment"
        # Staging deployment scriptleri buraya
        
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging"
        # Staging smoke testleri

  # Production deployment (GitHub hosted)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker, deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying BizGenciz to production environment"
        # Production deployment scriptleri buraya
        
    - name: Run health checks
      run: |
        echo "Running health checks on production"
        # Production health check'leri
        
    - name: Notify deployment
      run: |
        echo "BizGenciz deployment completed successfully"
        # Slack/Discord notification

  # Performance testing (GitHub hosted)
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --no-audit --no-fund
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Run performance tests
      run: npm run test:performance
      env:
        BASE_URL: ${{ secrets.STAGING_URL }}
        
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: test-results/

  # Accessibility testing (GitHub hosted)
  accessibility:
    name: Accessibility Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --no-audit --no-fund
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Run accessibility tests
      run: npm run test:accessibility
      env:
        BASE_URL: ${{ secrets.STAGING_URL }}
        
    - name: Upload accessibility results
      uses: actions/upload-artifact@v4
      with:
        name: accessibility-results
        path: test-results/ 