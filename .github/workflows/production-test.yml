name: Production Deployment Test

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Test environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'

jobs:
  # Production build test
  production-build:
    name: Production Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --frozen-lockfile --prefer-offline
      
    - name: Run linting
      run: npm run lint
      
    - name: Run type checking
      run: npx tsc --noEmit
      
    - name: Run unit tests
      run: npm test
      
    - name: Build production application
      run: npm run build
      
    - name: Test production build
      run: |
        echo "Testing production build..."
        npm run start &
        sleep 10
        curl -f http://localhost:3000/api/health || exit 1
        pkill -f "next start"
        
    - name: Upload production build
      uses: actions/upload-artifact@v4
      with:
        name: production-build
        path: |
          .next/
          out/
        retention-days: 7

  # Docker production test
  docker-production:
    name: Docker Production Test
    runs-on: ubuntu-latest
    needs: production-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build production Docker image
      run: |
        docker build -f Dockerfile -t yemekzen:production .
        
    - name: Test production Docker container
      run: |
        echo "Testing production Docker container..."
        docker run -d --name yemekzen-prod -p 3000:3000 yemekzen:production
        sleep 15
        curl -f http://localhost:3000/api/health || exit 1
        docker stop yemekzen-prod
        docker rm yemekzen-prod
        
    - name: Test Docker container health
      run: |
        docker run --rm yemekzen:production npm test
        docker run --rm yemekzen:production npm run build:analyze

  # Environment variables test
  env-test:
    name: Environment Variables Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --frozen-lockfile
      
    - name: Test environment variables
      run: |
        echo "Testing environment variables..."
        
        # Required env vars
        required_vars=(
          "DATABASE_URL"
          "DIRECT_URL"
          "NEXTAUTH_SECRET"
          "NEXTAUTH_URL"
          "SUPABASE_URL"
          "SUPABASE_ANON_KEY"
        )
        
        for var in "${required_vars[@]}"; do
          if [ -z "${!var}" ]; then
            echo "❌ Missing required environment variable: $var"
            exit 1
          else
            echo "✅ Environment variable $var is set"
          fi
        done
        
        echo "✅ All required environment variables are present"

  # Security test
  security-test:
    name: Security Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --frozen-lockfile
      
    - name: Run npm audit
      run: npm audit --audit-level=moderate
      
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --all-projects

  # Performance test
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [production-build, docker-production]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --frozen-lockfile
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Run performance tests
      run: npm run test:performance
      
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: test-results/

  # Deployment simulation
  deployment-simulation:
    name: Deployment Simulation
    runs-on: ubuntu-latest
    needs: [env-test, security-test, performance-test]
    if: github.event.inputs.environment == 'production'
    
    steps:
    - name: Simulate production deployment
      run: |
        echo "🚀 Simulating production deployment..."
        echo "Environment: ${{ github.event.inputs.environment }}"
        echo "Branch: ${{ github.ref }}"
        echo "Commit: ${{ github.sha }}"
        
        # Simulate deployment steps
        echo "1. Building production image..."
        echo "2. Running health checks..."
        echo "3. Updating production environment..."
        echo "4. Running smoke tests..."
        echo "5. Monitoring deployment..."
        
        echo "✅ Production deployment simulation completed"
        
    - name: Notify deployment
      run: |
        echo "📢 Production deployment notification"
        echo "Status: SUCCESS"
        echo "Environment: ${{ github.event.inputs.environment }}"
        echo "Deployed by: ${{ github.actor }}"
        echo "Deployment time: $(date)"

  # Final summary
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [production-build, docker-production, env-test, security-test, performance-test, deployment-simulation]
    if: always()
    
    steps:
    - name: Generate deployment summary
      run: |
        echo "## 🚀 Production Deployment Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Test Results:" >> $GITHUB_STEP_SUMMARY
        echo "- Production Build: ${{ needs.production-build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Docker Production: ${{ needs.docker-production.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Environment Variables: ${{ needs.env-test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Security Test: ${{ needs.security-test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Performance Test: ${{ needs.performance-test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Deployment Simulation: ${{ needs.deployment-simulation.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Production Readiness:" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Production build successful" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Docker container working" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Environment variables configured" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Security checks passed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Performance tests completed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Deployment simulation successful" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🎉 **Production deployment is ready!**" >> $GITHUB_STEP_SUMMARY 